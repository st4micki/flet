
fletv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005b30  08005b30  00015b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d38  08005d38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d38  08005d38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010bc  2000000c  08005d4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  08005d4c  000210c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e519  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002242  00000000  00000000  0002e555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00030798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c299  00000000  00000000  00032190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd02  00000000  00000000  0004e429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8dee  00000000  00000000  0005e12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  00106f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b14 	.word	0x08005b14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b14 	.word	0x08005b14

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
// do something cool
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* adc_address){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	static int number_of_interrupts = 0;
	if(adc_address == &hadc1){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d13b      	bne.n	8000b8c <HAL_ADC_ConvCpltCallback+0x88>
		if(number_of_interrupts == 12000){
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d135      	bne.n	8000b8c <HAL_ADC_ConvCpltCallback+0x88>
			number_of_interrupts = 0;
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
			adc_read = HAL_ADC_GetValue(&hadc1);
 8000b26:	481e      	ldr	r0, [pc, #120]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000b28:	f000 fe48 	bl	80017bc <HAL_ADC_GetValue>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000b30:	6013      	str	r3, [r2, #0]
			if(0 < adc_read && adc_read < 1000 - 1){
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d012      	beq.n	8000b60 <HAL_ADC_ConvCpltCallback+0x5c>
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d80c      	bhi.n	8000b60 <HAL_ADC_ConvCpltCallback+0x5c>
				TIM2->ARR = HAL_ADC_GetValue(&hadc1) - 1;
 8000b46:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000b48:	f000 fe38 	bl	80017bc <HAL_ADC_GetValue>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b52:	3b01      	subs	r3, #1
 8000b54:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM2->CNT = 0;
 8000b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8000b5e:	e015      	b.n	8000b8c <HAL_ADC_ConvCpltCallback+0x88>
		}
			else if(adc_read == 0){
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d108      	bne.n	8000b7a <HAL_ADC_ConvCpltCallback+0x76>
				TIM2->ARR = 1;
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CNT = 0;
 8000b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
 8000b78:	e008      	b.n	8000b8c <HAL_ADC_ConvCpltCallback+0x88>
			}
			else{
				TIM2->ARR = 1000 - 1;
 8000b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CNT = 0;
 8000b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

	}
	number_of_interrupts++;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	200010c0 	.word	0x200010c0
 8000ba8:	200010bc 	.word	0x200010bc
 8000bac:	00000000 	.word	0x00000000

08000bb0 <get_sine>:

void get_sine(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	  for(int i = 0; i < NUM_OF_SAMPLES; i++){
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e03a      	b.n	8000c32 <get_sine+0x82>
		  sine_val[i] = (sin(i*2*PI/NUM_OF_SAMPLES) +1) * ((0xFFF + 1) / 2);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fc53 	bl	800046c <__aeabi_i2d>
 8000bc6:	a324      	add	r3, pc, #144	; (adr r3, 8000c58 <get_sine+0xa8>)
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fcb8 	bl	8000540 <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <get_sine+0x98>)
 8000bde:	f7ff fdd9 	bl	8000794 <__aeabi_ddiv>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	ec43 2b17 	vmov	d7, r2, r3
 8000bea:	eeb0 0a47 	vmov.f32	s0, s14
 8000bee:	eef0 0a67 	vmov.f32	s1, s15
 8000bf2:	f003 ff45 	bl	8004a80 <sin>
 8000bf6:	ec51 0b10 	vmov	r0, r1, d0
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <get_sine+0x9c>)
 8000c00:	f7ff fae8 	bl	80001d4 <__adddf3>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <get_sine+0xa0>)
 8000c12:	f7ff fc95 	bl	8000540 <__aeabi_dmul>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff ff51 	bl	8000ac4 <__aeabi_d2uiz>
 8000c22:	4602      	mov	r2, r0
 8000c24:	490b      	ldr	r1, [pc, #44]	; (8000c54 <get_sine+0xa4>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < NUM_OF_SAMPLES; i++){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c38:	dbc0      	blt.n	8000bbc <get_sine+0xc>

	  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	f3af 8000 	nop.w
 8000c48:	408f4000 	.word	0x408f4000
 8000c4c:	3ff00000 	.word	0x3ff00000
 8000c50:	40a00000 	.word	0x40a00000
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	4d12d84a 	.word	0x4d12d84a
 8000c5c:	400921fb 	.word	0x400921fb

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fb11 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f825 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 f971 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c72:	f000 f951 	bl	8000f18 <MX_DMA_Init>
  MX_DAC_Init();
 8000c76:	f000 f8d7 	bl	8000e28 <MX_DAC_Init>
  MX_TIM2_Init();
 8000c7a:	f000 f8ff 	bl	8000e7c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000c7e:	f000 f877 	bl	8000d70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  get_sine();
 8000c82:	f7ff ff95 	bl	8000bb0 <get_sine>
  HAL_TIM_Base_Start(&htim2);
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <main+0x48>)
 8000c88:	f003 fc4a 	bl	8004520 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, NUM_OF_SAMPLES, DAC_ALIGN_12B_R);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <main+0x4c>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <main+0x50>)
 8000c9a:	f001 fc39 	bl	8002510 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <main+0x54>)
 8000ca0:	f000 fcf4 	bl	800168c <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <main+0x44>
 8000ca6:	bf00      	nop
 8000ca8:	200000d0 	.word	0x200000d0
 8000cac:	2000011c 	.word	0x2000011c
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	20000028 	.word	0x20000028

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b09c      	sub	sp, #112	; 0x70
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cc2:	2228      	movs	r2, #40	; 0x28
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fed2 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2234      	movs	r2, #52	; 0x34
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fec4 	bl	8004a70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000d04:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fff8 	bl	8002d04 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d1a:	f000 f93f 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 f820 	bl	8003d80 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d46:	f000 f929 	bl	8000f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV256;
 8000d4e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000d52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 f9f8 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d62:	f000 f91b 	bl	8000f9c <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3770      	adds	r7, #112	; 0x70
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000de2:	f000 facd 	bl	8001380 <HAL_ADC_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000dec:	f000 f8d6 	bl	8000f9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_ADC1_Init+0xb4>)
 8000e0e:	f000 fead 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e18:	f000 f8c0 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000028 	.word	0x20000028

08000e28 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_DAC_Init+0x4c>)
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <MX_DAC_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_DAC_Init+0x4c>)
 8000e40:	f001 fb25 	bl	800248e <HAL_DAC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000e4a:	f000 f8a7 	bl	8000f9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e4e:	2324      	movs	r3, #36	; 0x24
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_DAC_Init+0x4c>)
 8000e5e:	f001 fbc5 	bl	80025ec <HAL_DAC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000e68:	f000 f898 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000078 	.word	0x20000078
 8000e78:	40007400 	.word	0x40007400

08000e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ec4:	f003 fad4 	bl	8004470 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ece:	f000 f865 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ee0:	f003 fb6a 	bl	80045b8 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eea:	f000 f857 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eee:	2320      	movs	r3, #32
 8000ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000efc:	f003 fd2e 	bl	800495c <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 f849 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000d0 	.word	0x200000d0

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_DMA_Init+0x38>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <MX_DMA_Init+0x38>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_DMA_Init+0x38>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	200d      	movs	r0, #13
 8000f3c:	f001 fa71 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f40:	200d      	movs	r0, #13
 8000f42:	f001 fa8a 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_GPIO_Init+0x44>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <MX_GPIO_Init+0x44>)
 8000f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_GPIO_Init+0x44>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_GPIO_Init+0x44>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <MX_GPIO_Init+0x44>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_GPIO_Init+0x44>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x44>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x44>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x44>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x44>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x44>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f001 fa14 	bl	800240c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001010:	d12c      	bne.n	800106c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_ADC_MspInit+0x84>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_ADC_MspInit+0x84>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x84>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_ADC_MspInit+0x84>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_ADC_MspInit+0x84>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x84>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f001 fce2 	bl	8002a20 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2012      	movs	r0, #18
 8001062:	f001 f9de 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001066:	2012      	movs	r0, #18
 8001068:	f001 f9f7 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <HAL_DAC_MspInit+0xd0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d152      	bne.n	8001140 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_DAC_MspInit+0xd4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a2b      	ldr	r2, [pc, #172]	; (800114c <HAL_DAC_MspInit+0xd4>)
 80010a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <HAL_DAC_MspInit+0xd4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <HAL_DAC_MspInit+0xd4>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a25      	ldr	r2, [pc, #148]	; (800114c <HAL_DAC_MspInit+0xd4>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_DAC_MspInit+0xd4>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ca:	2310      	movs	r3, #16
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f001 fc9e 	bl	8002a20 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_DAC_MspInit+0xdc>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 80010ec:	2210      	movs	r2, #16
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 80010fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001102:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 8001106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 800110e:	2220      	movs	r2, #32
 8001110:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 800111a:	f001 faea 	bl	80026f2 <HAL_DMA_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001124:	f7ff ff3a 	bl	8000f9c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_DAC_MspInit+0xe0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_DAC_MspInit+0xe0>)
 800112e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001132:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <HAL_DAC_MspInit+0xd8>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40007400 	.word	0x40007400
 800114c:	40021000 	.word	0x40021000
 8001150:	2000008c 	.word	0x2000008c
 8001154:	40020030 	.word	0x40020030
 8001158:	40010000 	.word	0x40010000

0800115c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d10b      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_TIM_Base_MspInit+0x38>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_TIM_Base_MspInit+0x38>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_TIM_Base_MspInit+0x38>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f898 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA1_Channel3_IRQHandler+0x10>)
 80011f2:	f001 fb24 	bl	800283e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000008c 	.word	0x2000008c

08001200 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <ADC1_IRQHandler+0x10>)
 8001206:	f000 fae7 	bl	80017d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000028 	.word	0x20000028

08001214 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff ffea 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	; (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	; (8001284 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f003 fbdf 	bl	8004a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126a:	f7ff fcf9 	bl	8000c60 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001270:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800127c:	08005d40 	.word	0x08005d40
  ldr r2, =_sbss
 8001280:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001284:	200010c8 	.word	0x200010c8

08001288 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <CAN_RX1_IRQHandler>
	...

0800128c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_Init+0x28>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x28>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f001 f8b5 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fe7e 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f8cd 	bl	8002476 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f001 f895 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	20000008 	.word	0x20000008
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	200010c4 	.word	0x200010c4

08001340 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;  
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200010c4 	.word	0x200010c4

08001358 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b09a      	sub	sp, #104	; 0x68
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e169      	b.n	8001674 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d176      	bne.n	80014a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d152      	bne.n	8001460 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe0b 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d13b      	bne.n	8001460 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fed9 	bl	80021a0 <ADC_Disable>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12f      	bne.n	8001460 <HAL_ADC_Init+0xe0>
 8001400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001404:	2b00      	cmp	r3, #0
 8001406:	d12b      	bne.n	8001460 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001410:	f023 0302 	bic.w	r3, r3, #2
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800142a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800143a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800143c:	4b8f      	ldr	r3, [pc, #572]	; (800167c <HAL_ADC_Init+0x2fc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a8f      	ldr	r2, [pc, #572]	; (8001680 <HAL_ADC_Init+0x300>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9a      	lsrs	r2, r3, #18
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001452:	e002      	b.n	800145a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3b01      	subs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800147c:	d110      	bne.n	80014a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f023 0312 	bic.w	r3, r3, #18
 8001486:	f043 0210 	orr.w	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 80d6 	bne.w	800165a <HAL_ADC_Init+0x2da>
 80014ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 80d1 	bne.w	800165a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80c9 	bne.w	800165a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014d0:	f043 0202 	orr.w	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d8:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_ADC_Init+0x304>)
 80014da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_ADC_Init+0x180>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_Init+0x180>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_ADC_Init+0x182>
 8001500:	2300      	movs	r3, #0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11c      	bne.n	8001540 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001506:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001508:	2b00      	cmp	r3, #0
 800150a:	d010      	beq.n	800152e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d107      	bne.n	8001528 <HAL_ADC_Init+0x1a8>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_Init+0x1a8>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_ADC_Init+0x1aa>
 8001528:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800152e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	431a      	orrs	r2, r3
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e5b      	ldrb	r3, [r3, #25]
 8001544:	035b      	lsls	r3, r3, #13
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800154a:	2a01      	cmp	r2, #1
 800154c:	d002      	beq.n	8001554 <HAL_ADC_Init+0x1d4>
 800154e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001552:	e000      	b.n	8001556 <HAL_ADC_Init+0x1d6>
 8001554:	2200      	movs	r2, #0
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4313      	orrs	r3, r2
 8001564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001566:	4313      	orrs	r3, r2
 8001568:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d11b      	bne.n	80015ac <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e5b      	ldrb	r3, [r3, #25]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	3b01      	subs	r3, #1
 8001582:	045a      	lsls	r2, r3, #17
 8001584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001586:	4313      	orrs	r3, r2
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	663b      	str	r3, [r7, #96]	; 0x60
 800158e:	e00d      	b.n	80015ac <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001598:	f043 0220 	orr.w	r2, r3, #32
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d007      	beq.n	80015c4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	4313      	orrs	r3, r2
 80015be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015c0:	4313      	orrs	r3, r2
 80015c2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d114      	bne.n	80015fc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7e1b      	ldrb	r3, [r3, #24]
 80015ea:	039a      	lsls	r2, r3, #14
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4313      	orrs	r3, r2
 80015f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015f8:	4313      	orrs	r3, r2
 80015fa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_ADC_Init+0x308>)
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800160c:	430b      	orrs	r3, r1
 800160e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d10c      	bne.n	8001632 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f023 010f 	bic.w	r1, r3, #15
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
 8001630:	e007      	b.n	8001642 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 020f 	bic.w	r2, r2, #15
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f023 0303 	bic.w	r3, r3, #3
 8001650:	f043 0201 	orr.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
 8001658:	e00a      	b.n	8001670 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f023 0312 	bic.w	r3, r3, #18
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001674:	4618      	mov	r0, r3
 8001676:	3768      	adds	r7, #104	; 0x68
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83
 8001684:	50000300 	.word	0x50000300
 8001688:	fff0c007 	.word	0xfff0c007

0800168c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 8083 	bne.w	80017ae <HAL_ADC_Start_IT+0x122>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Start_IT+0x2a>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e07e      	b.n	80017b4 <HAL_ADC_Start_IT+0x128>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fd0a 	bl	80020d8 <ADC_Enable>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d16a      	bne.n	80017a4 <HAL_ADC_Start_IT+0x118>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <HAL_ADC_Start_IT+0x80>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001704:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001718:	d106      	bne.n	8001728 <HAL_ADC_Start_IT+0x9c>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f023 0206 	bic.w	r2, r3, #6
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
 8001726:	e002      	b.n	800172e <HAL_ADC_Start_IT+0xa2>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	221c      	movs	r2, #28
 800173c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d110      	bne.n	8001768 <HAL_ADC_Start_IT+0xdc>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0204 	bic.w	r2, r2, #4
 8001754:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0208 	orr.w	r2, r2, #8
 8001764:	605a      	str	r2, [r3, #4]
          break;
 8001766:	e008      	b.n	800177a <HAL_ADC_Start_IT+0xee>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 020c 	orr.w	r2, r2, #12
 8001776:	605a      	str	r2, [r3, #4]
          break;
 8001778:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_ADC_Start_IT+0x106>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0210 	bic.w	r2, r2, #16
 8001790:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0204 	orr.w	r2, r2, #4
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	e006      	b.n	80017b2 <HAL_ADC_Start_IT+0x126>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017ac:	e001      	b.n	80017b2 <HAL_ADC_Start_IT+0x126>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
 80017b0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_ADC_IRQHandler+0x38>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001816:	2b00      	cmp	r3, #0
 8001818:	d05a      	beq.n	80018d0 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d055      	beq.n	80018d0 <HAL_ADC_IRQHandler+0xf8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800184e:	2b00      	cmp	r3, #0
 8001850:	d137      	bne.n	80018c2 <HAL_ADC_IRQHandler+0xea>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001858:	2b00      	cmp	r3, #0
 800185a:	d132      	bne.n	80018c2 <HAL_ADC_IRQHandler+0xea>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d02d      	beq.n	80018c2 <HAL_ADC_IRQHandler+0xea>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11a      	bne.n	80018aa <HAL_ADC_IRQHandler+0xd2>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020c 	bic.w	r2, r2, #12
 8001882:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d112      	bne.n	80018c2 <HAL_ADC_IRQHandler+0xea>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
 80018a8:	e00b      	b.n	80018c2 <HAL_ADC_IRQHandler+0xea>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f043 0210 	orr.w	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff f91e 	bl	8000b04 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	220c      	movs	r2, #12
 80018ce:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x10c>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0320 	and.w	r3, r3, #32
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_IRQHandler+0x120>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d069      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d064      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d14c      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00b      	beq.n	800193c <HAL_ADC_IRQHandler+0x164>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800192e:	2b00      	cmp	r3, #0
 8001930:	d140      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d13b      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d036      	beq.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d12d      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11a      	bne.n	800199c <HAL_ADC_IRQHandler+0x1c4>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001974:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d112      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
 800199a:	e00b      	b.n	80019b4 <HAL_ADC_IRQHandler+0x1dc>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f043 0210 	orr.w	r2, r3, #16
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8b1 	bl	8001b1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2260      	movs	r2, #96	; 0x60
 80019c0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d011      	beq.n	80019f0 <HAL_ADC_IRQHandler+0x218>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00c      	beq.n	80019f0 <HAL_ADC_IRQHandler+0x218>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fcb8 	bl	8001358 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d012      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x248>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00d      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x248>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f897 	bl	8001b44 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x278>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x278>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f889 	bl	8001b58 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03b      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x2fa>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d036      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x2fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d102      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x29a>
    {
      overrun_error = 1U;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e019      	b.n	8001aa6 <HAL_ADC_IRQHandler+0x2ce>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_ADC_IRQHandler+0x340>)
 8001a74:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_ADC_IRQHandler+0x2be>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8001a90:	2301      	movs	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	e007      	b.n	8001aa6 <HAL_ADC_IRQHandler+0x2ce>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10e      	bne.n	8001aca <HAL_ADC_IRQHandler+0x2f2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0202 	orr.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fc51 	bl	800136c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d018      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x336>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d013      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x336>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f043 0208 	orr.w	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b06:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f811 	bl	8001b30 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	50000300 	.word	0x50000300

08001b1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b09b      	sub	sp, #108	; 0x6c
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x22>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e299      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x556>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 827d 	bne.w	80020a0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d81c      	bhi.n	8001be8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	231f      	movs	r3, #31
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa00 f203 	lsl.w	r2, r0, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
 8001be6:	e063      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d81e      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	3b1e      	subs	r3, #30
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4019      	ands	r1, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	3b1e      	subs	r3, #30
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2c:	e040      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b0e      	cmp	r3, #14
 8001c34:	d81e      	bhi.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	3b3c      	subs	r3, #60	; 0x3c
 8001c4a:	221f      	movs	r2, #31
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	3b3c      	subs	r3, #60	; 0x3c
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
 8001c72:	e01d      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	3b5a      	subs	r3, #90	; 0x5a
 8001c88:	221f      	movs	r2, #31
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4019      	ands	r1, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	3b5a      	subs	r3, #90	; 0x5a
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 80e5 	bne.w	8001e8a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d91c      	bls.n	8001d02 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6999      	ldr	r1, [r3, #24]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b1e      	subs	r3, #30
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b1e      	subs	r3, #30
 8001cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	e019      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6959      	ldr	r1, [r3, #20]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	2207      	movs	r2, #7
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6898      	ldr	r0, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	08db      	lsrs	r3, r3, #3
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d84f      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0x28c>
 8001d58:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_ADC_ConfigChannel+0x1f4>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d93 	.word	0x08001d93
 8001d68:	08001db5 	.word	0x08001db5
 8001d6c:	08001dd7 	.word	0x08001dd7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d76:	4b99      	ldr	r3, [pc, #612]	; (8001fdc <HAL_ADC_ConfigChannel+0x470>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	0691      	lsls	r1, r2, #26
 8001d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d82:	430a      	orrs	r2, r1
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d8e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d90:	e07e      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <HAL_ADC_ConfigChannel+0x470>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	0691      	lsls	r1, r2, #26
 8001da2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da4:	430a      	orrs	r2, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001db0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001db2:	e06d      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_ADC_ConfigChannel+0x470>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	0691      	lsls	r1, r2, #26
 8001dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dd2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dd4:	e05c      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ddc:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <HAL_ADC_ConfigChannel+0x470>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	0691      	lsls	r1, r2, #26
 8001de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001de8:	430a      	orrs	r2, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001df4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001df6:	e04b      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e3e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d107      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e62:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	069b      	lsls	r3, r3, #26
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10a      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e86:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e88:	e001      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001e8e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x344>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x344>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x346>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80ff 	bne.w	80020b6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d00f      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ede:	e049      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	d91c      	bls.n	8001f3c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6999      	ldr	r1, [r3, #24]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	3b1b      	subs	r3, #27
 8001f14:	2207      	movs	r2, #7
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4019      	ands	r1, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6898      	ldr	r0, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1b      	subs	r3, #27
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e01b      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6959      	ldr	r1, [r3, #20]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2207      	movs	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4019      	ands	r1, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6898      	ldr	r0, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_ADC_ConfigChannel+0x474>)
 8001f76:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d014      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f90:	2b11      	cmp	r3, #17
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fa4:	2b12      	cmp	r3, #18
 8001fa6:	f040 8086 	bne.w	80020b6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d17f      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x478>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x478>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e005      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x47a>
 8001fda:	bf00      	nop
 8001fdc:	83fff000 	.word	0x83fff000
 8001fe0:	50000300 	.word	0x50000300
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d150      	bne.n	800208c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_ADC_ConfigChannel+0x4a0>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x4a0>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_ADC_ConfigChannel+0x4a2>
 800200c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	d13c      	bne.n	800208c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b10      	cmp	r3, #16
 8002018:	d11d      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x4ea>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002022:	d118      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800202c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_ADC_ConfigChannel+0x564>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <HAL_ADC_ConfigChannel+0x568>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9a      	lsrs	r2, r3, #18
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002046:	e002      	b.n	800204e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3b01      	subs	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002054:	e02e      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b11      	cmp	r3, #17
 800205c:	d10b      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x50a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002066:	d106      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002072:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002074:	e01e      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b12      	cmp	r3, #18
 800207c:	d11a      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800207e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002088:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800208a:	e013      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800209e:	e00a      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020b2:	e000      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	376c      	adds	r7, #108	; 0x6c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <ADC_Enable+0x2c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <ADC_Enable+0x2c>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <ADC_Enable+0x2e>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d143      	bne.n	8002192 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <ADC_Enable+0xc4>)
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00d      	beq.n	8002134 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e02f      	b.n	8002194 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002144:	f7ff f8fc 	bl	8001340 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214a:	e01b      	b.n	8002184 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800214c:	f7ff f8f8 	bl	8001340 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d914      	bls.n	8002184 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d00d      	beq.n	8002184 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f043 0210 	orr.w	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e007      	b.n	8002194 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d1dc      	bne.n	800214c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	8000003f 	.word	0x8000003f

080021a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <ADC_Disable+0x2c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <ADC_Disable+0x2c>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <ADC_Disable+0x2e>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d047      	beq.n	8002262 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030d 	and.w	r3, r3, #13
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d10f      	bne.n	8002200 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0202 	orr.w	r2, r2, #2
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2203      	movs	r2, #3
 80021f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021f8:	f7ff f8a2 	bl	8001340 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021fe:	e029      	b.n	8002254 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e023      	b.n	8002264 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800221c:	f7ff f890 	bl	8001340 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d914      	bls.n	8002254 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10d      	bne.n	8002254 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0210 	orr.w	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0201 	orr.w	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e007      	b.n	8002264 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d0dc      	beq.n	800221c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e014      	b.n	80024ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	791b      	ldrb	r3, [r3, #4]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fde1 	bl	8001078 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	795b      	ldrb	r3, [r3, #5]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_DAC_Start_DMA+0x1e>
 800252a:	2302      	movs	r3, #2
 800252c:	e053      	b.n	80025d6 <HAL_DAC_Start_DMA+0xc6>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2202      	movs	r2, #2
 8002538:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_DAC_Start_DMA+0xd0>)
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_DAC_Start_DMA+0xd4>)
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_DAC_Start_DMA+0xd8>)
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002560:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d013      	beq.n	8002590 <HAL_DAC_Start_DMA+0x80>
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b08      	cmp	r3, #8
 800256c:	d815      	bhi.n	800259a <HAL_DAC_Start_DMA+0x8a>
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_DAC_Start_DMA+0x6c>
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d005      	beq.n	8002586 <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 800257a:	e00e      	b.n	800259a <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3308      	adds	r3, #8
 8002582:	617b      	str	r3, [r7, #20]
      break;
 8002584:	e00a      	b.n	800259c <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	330c      	adds	r3, #12
 800258c:	617b      	str	r3, [r7, #20]
      break;
 800258e:	e005      	b.n	800259c <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3310      	adds	r3, #16
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e000      	b.n	800259c <HAL_DAC_Start_DMA+0x8c>
      break;
 800259a:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025aa:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6898      	ldr	r0, [r3, #8]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	f000 f8e3 	bl	8002780 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	2201      	movs	r2, #1
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	08002687 	.word	0x08002687
 80025e4:	080026a9 	.word	0x080026a9
 80025e8:	080026c5 	.word	0x080026c5

080025ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_DAC_ConfigChannel+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e036      	b.n	800267a <HAL_DAC_ConfigChannel+0x8e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2202      	movs	r2, #2
 8002616:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002620:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4013      	ands	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	22c0      	movs	r2, #192	; 0xc0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff ff1c 	bl	80024d2 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	711a      	strb	r2, [r3, #4]
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff ff15 	bl	80024e6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff ff0b 	bl	80024fa <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	711a      	strb	r2, [r3, #4]
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e037      	b.n	8002778 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800271e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002722:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f940 	bl	80029e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}  
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Start_IT+0x20>
 800279c:	2302      	movs	r3, #2
 800279e:	e04a      	b.n	8002836 <HAL_DMA_Start_IT+0xb6>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d13a      	bne.n	8002828 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f8d4 	bl	8002984 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 020e 	orr.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e00f      	b.n	8002816 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 020a 	orr.w	r2, r2, #10
 8002804:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0204 	bic.w	r2, r2, #4
 8002814:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e005      	b.n	8002834 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002830:	2302      	movs	r3, #2
 8002832:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002834:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2204      	movs	r2, #4
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d024      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x72>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01f      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0204 	bic.w	r2, r2, #4
 800288c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	2104      	movs	r1, #4
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06a      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80028ae:	e065      	b.n	800297c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2202      	movs	r2, #2
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02c      	beq.n	800291a <HAL_DMA_IRQHandler+0xdc>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d027      	beq.n	800291a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 020a 	bic.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	2102      	movs	r1, #2
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d035      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002918:	e030      	b.n	800297c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2208      	movs	r2, #8
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d028      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d023      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 020e 	bic.w	r2, r2, #14
 8002942:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
    }
  }
}  
 800297a:	e7ff      	b.n	800297c <HAL_DMA_IRQHandler+0x13e>
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d108      	bne.n	80029c4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029c2:	e007      	b.n	80029d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <DMA_CalcBaseAndBitshift+0x34>)
 80029f0:	4413      	add	r3, r2
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <DMA_CalcBaseAndBitshift+0x38>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <DMA_CalcBaseAndBitshift+0x3c>)
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	bffdfff8 	.word	0xbffdfff8
 8002a18:	cccccccd 	.word	0xcccccccd
 8002a1c:	40020000 	.word	0x40020000

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	e14e      	b.n	8002cce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8140 	beq.w	8002cc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d005      	beq.n	8002a60 <HAL_GPIO_Init+0x40>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0201 	and.w	r2, r3, #1
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d017      	beq.n	8002afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d123      	bne.n	8002b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	6939      	ldr	r1, [r7, #16]
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 809a 	beq.w	8002cc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b52      	ldr	r3, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bac:	4a50      	ldr	r2, [pc, #320]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd6:	d013      	beq.n	8002c00 <HAL_GPIO_Init+0x1e0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_GPIO_Init+0x2d4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00d      	beq.n	8002bfc <HAL_GPIO_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_GPIO_Init+0x2d8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x1d8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <HAL_GPIO_Init+0x2dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_GPIO_Init+0x1d4>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e004      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002c00:	2300      	movs	r3, #0
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4093      	lsls	r3, r2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c12:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c6e:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aea9 	bne.w	8002a30 <HAL_GPIO_Init+0x10>
  }
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	48000c00 	.word	0x48000c00
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f001 b823 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 817d 	beq.w	800303a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d40:	4bbc      	ldr	r3, [pc, #752]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4bb9      	ldr	r3, [pc, #740]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d15c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x10e>
 8002d58:	4bb6      	ldr	r3, [pc, #728]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d155      	bne.n	8002e12 <HAL_RCC_OscConfig+0x10e>
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x94>
 8002d92:	4ba8      	ldr	r3, [pc, #672]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e015      	b.n	8002dc4 <HAL_RCC_OscConfig+0xc0>
 8002d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002db4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002dc0:	4b9c      	ldr	r3, [pc, #624]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dc8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002dcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dd0:	fa92 f2a2 	rbit	r2, r2
 8002dd4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002dd8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f042 0220 	orr.w	r2, r2, #32
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f002 021f 	and.w	r2, r2, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 811f 	beq.w	8003038 <HAL_RCC_OscConfig+0x334>
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 8116 	bne.w	8003038 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f000 bfaf 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12e>
 8002e24:	4b83      	ldr	r3, [pc, #524]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a82      	ldr	r2, [pc, #520]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	e036      	b.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x158>
 8002e42:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7b      	ldr	r2, [pc, #492]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b79      	ldr	r3, [pc, #484]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e021      	b.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x184>
 8002e6e:	4b71      	ldr	r3, [pc, #452]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a70      	ldr	r2, [pc, #448]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b6e      	ldr	r3, [pc, #440]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6d      	ldr	r2, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a69      	ldr	r2, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea0:	4b64      	ldr	r3, [pc, #400]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f023 020f 	bic.w	r2, r3, #15
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	495f      	ldr	r1, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d059      	beq.n	8002f7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe fa39 	bl	8001340 <HAL_GetTick>
 8002ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fa34 	bl	8001340 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d902      	bls.n	8002eea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	f000 bf43 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
 8002eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002efe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_RCC_OscConfig+0x218>
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	e015      	b.n	8002f48 <HAL_RCC_OscConfig+0x244>
 8002f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f20:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f44:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f4c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ab      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x1d0>
 8002f7c:	e05d      	b.n	800303a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f9df 	bl	8001340 <HAL_GetTick>
 8002f82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe f9da 	bl	8001340 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d902      	bls.n	8002f9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f000 bee9 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
 8002f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2cc>
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	e015      	b.n	8002ffc <HAL_RCC_OscConfig+0x2f8>
 8002fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_RCC_OscConfig+0x330>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003000:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003004:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003008:	fa92 f2a2 	rbit	r2, r2
 800300c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003010:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003014:	fab2 f282 	clz	r2, r2
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f042 0220 	orr.w	r2, r2, #32
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f002 021f 	and.w	r2, r2, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f202 	lsl.w	r2, r1, r2
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ab      	bne.n	8002f88 <HAL_RCC_OscConfig+0x284>
 8003030:	e003      	b.n	800303a <HAL_RCC_OscConfig+0x336>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 817d 	beq.w	800334a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003050:	4ba6      	ldr	r3, [pc, #664]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800305c:	4ba3      	ldr	r3, [pc, #652]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d172      	bne.n	800314e <HAL_RCC_OscConfig+0x44a>
 8003068:	4ba0      	ldr	r3, [pc, #640]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d16c      	bne.n	800314e <HAL_RCC_OscConfig+0x44a>
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003086:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <HAL_RCC_OscConfig+0x3a0>
 800309e:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e013      	b.n	80030cc <HAL_RCC_OscConfig+0x3c8>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030b6:	2302      	movs	r3, #2
 80030b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80030c8:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2202      	movs	r2, #2
 80030ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80030d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030d6:	fa92 f2a2 	rbit	r2, r2
 80030da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCC_OscConfig+0x410>
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d002      	beq.n	8003114 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f000 be2e 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b75      	ldr	r3, [pc, #468]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	21f8      	movs	r1, #248	; 0xf8
 800312a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003132:	fa91 f1a1 	rbit	r1, r1
 8003136:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800313a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800313e:	fab1 f181 	clz	r1, r1
 8003142:	b2c9      	uxtb	r1, r1
 8003144:	408b      	lsls	r3, r1
 8003146:	4969      	ldr	r1, [pc, #420]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314c:	e0fd      	b.n	800334a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8088 	beq.w	8003270 <HAL_RCC_OscConfig+0x56c>
 8003160:	2301      	movs	r3, #1
 8003162:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003172:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	461a      	mov	r2, r3
 8003188:	2301      	movs	r3, #1
 800318a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe f8d8 	bl	8001340 <HAL_GetTick>
 8003190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe f8d3 	bl	8001340 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d902      	bls.n	80031ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	f000 bde2 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80031be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_RCC_OscConfig+0x4d8>
 80031d6:	4b45      	ldr	r3, [pc, #276]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	e013      	b.n	8003204 <HAL_RCC_OscConfig+0x500>
 80031dc:	2302      	movs	r3, #2
 80031de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031ee:	2302      	movs	r3, #2
 80031f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003200:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2202      	movs	r2, #2
 8003206:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800320a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003216:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0af      	beq.n	8003196 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	21f8      	movs	r1, #248	; 0xf8
 800324c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003254:	fa91 f1a1 	rbit	r1, r1
 8003258:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800325c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003260:	fab1 f181 	clz	r1, r1
 8003264:	b2c9      	uxtb	r1, r1
 8003266:	408b      	lsls	r3, r1
 8003268:	4920      	ldr	r1, [pc, #128]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
 800326e:	e06c      	b.n	800334a <HAL_RCC_OscConfig+0x646>
 8003270:	2301      	movs	r3, #1
 8003272:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003282:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	2300      	movs	r3, #0
 800329a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe f850 	bl	8001340 <HAL_GetTick>
 80032a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a6:	f7fe f84b 	bl	8001340 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	f000 bd5a 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80032ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d104      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5ec>
 80032e6:	4b01      	ldr	r3, [pc, #4]	; (80032ec <HAL_RCC_OscConfig+0x5e8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	e015      	b.n	8003318 <HAL_RCC_OscConfig+0x614>
 80032ec:	40021000 	.word	0x40021000
 80032f0:	2302      	movs	r3, #2
 80032f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003302:	2302      	movs	r3, #2
 8003304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003308:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003314:	4bc8      	ldr	r3, [pc, #800]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2202      	movs	r2, #2
 800331a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800331e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003322:	fa92 f2a2 	rbit	r2, r2
 8003326:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800332a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800332e:	fab2 f282 	clz	r2, r2
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	f042 0220 	orr.w	r2, r2, #32
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f002 021f 	and.w	r2, r2, #31
 800333e:	2101      	movs	r1, #1
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ad      	bne.n	80032a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8110 	beq.w	8003580 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d079      	beq.n	8003464 <HAL_RCC_OscConfig+0x760>
 8003370:	2301      	movs	r3, #1
 8003372:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	4bab      	ldr	r3, [pc, #684]	; (800363c <HAL_RCC_OscConfig+0x938>)
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	461a      	mov	r2, r3
 8003396:	2301      	movs	r3, #1
 8003398:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fd ffd1 	bl	8001340 <HAL_GetTick>
 800339e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fd ffcc 	bl	8001340 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d902      	bls.n	80033ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f000 bcdb 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
 80033ba:	2302      	movs	r3, #2
 80033bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033d4:	2202      	movs	r2, #2
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033f8:	2202      	movs	r2, #2
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003412:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 8003416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003420:	2102      	movs	r1, #2
 8003422:	6019      	str	r1, [r3, #0]
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f1a3 	rbit	r1, r3
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800343a:	6019      	str	r1, [r3, #0]
  return result;
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0a0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x6a0>
 8003462:	e08d      	b.n	8003580 <HAL_RCC_OscConfig+0x87c>
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003486:	601a      	str	r2, [r3, #0]
  return result;
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003490:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	4b68      	ldr	r3, [pc, #416]	; (800363c <HAL_RCC_OscConfig+0x938>)
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	461a      	mov	r2, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fd ff4b 	bl	8001340 <HAL_GetTick>
 80034aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b0:	f7fd ff46 	bl	8001340 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d902      	bls.n	80034c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	f000 bc55 	b.w	8003d70 <HAL_RCC_OscConfig+0x106c>
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034ce:	2202      	movs	r2, #2
 80034d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	fa93 f2a3 	rbit	r2, r3
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034f2:	2202      	movs	r2, #2
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003516:	2202      	movs	r2, #2
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003530:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 8003534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800353e:	2102      	movs	r1, #2
 8003540:	6019      	str	r1, [r3, #0]
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	fa93 f1a3 	rbit	r1, r3
 8003550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003554:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003558:	6019      	str	r1, [r3, #0]
  return result;
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d197      	bne.n	80034b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 81a1 	beq.w	80038d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b23      	ldr	r3, [pc, #140]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	61d3      	str	r3, [r2, #28]
 80035b4:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_OscConfig+0x93c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d11a      	bne.n	8003618 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_RCC_OscConfig+0x93c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_RCC_OscConfig+0x93c>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fd fea7 	bl	8001340 <HAL_GetTick>
 80035f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	e009      	b.n	800360c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f8:	f7fd fea2 	bl	8001340 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e3b1      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x93c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0ef      	beq.n	80035f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10d      	bne.n	8003644 <HAL_RCC_OscConfig+0x940>
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a02      	ldr	r2, [pc, #8]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6213      	str	r3, [r2, #32]
 8003634:	e03c      	b.n	80036b0 <HAL_RCC_OscConfig+0x9ac>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	10908120 	.word	0x10908120
 8003640:	40007000 	.word	0x40007000
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10c      	bne.n	800366e <HAL_RCC_OscConfig+0x96a>
 8003654:	4bc1      	ldr	r3, [pc, #772]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4ac0      	ldr	r2, [pc, #768]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	4bbe      	ldr	r3, [pc, #760]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4abd      	ldr	r2, [pc, #756]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e020      	b.n	80036b0 <HAL_RCC_OscConfig+0x9ac>
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x994>
 800367e:	4bb7      	ldr	r3, [pc, #732]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4ab6      	ldr	r2, [pc, #728]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	4bb4      	ldr	r3, [pc, #720]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4ab3      	ldr	r2, [pc, #716]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x9ac>
 8003698:	4bb0      	ldr	r3, [pc, #704]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4aaf      	ldr	r2, [pc, #700]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	4bad      	ldr	r3, [pc, #692]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4aac      	ldr	r2, [pc, #688]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8081 	beq.w	80037c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fd fe3d 	bl	8001340 <HAL_GetTick>
 80036c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fd fe38 	bl	8001340 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e345      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036ec:	2202      	movs	r2, #2
 80036ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003710:	2202      	movs	r2, #2
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800372a:	601a      	str	r2, [r3, #0]
  return result;
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003734:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d102      	bne.n	8003750 <HAL_RCC_OscConfig+0xa4c>
 800374a:	4b84      	ldr	r3, [pc, #528]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	e013      	b.n	8003778 <HAL_RCC_OscConfig+0xa74>
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003758:	2202      	movs	r2, #2
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	4b79      	ldr	r3, [pc, #484]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003780:	2102      	movs	r1, #2
 8003782:	6011      	str	r1, [r2, #0]
 8003784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003788:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	fa92 f1a2 	rbit	r1, r2
 8003792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003796:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800379a:	6011      	str	r1, [r2, #0]
  return result;
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f002 021f 	and.w	r2, r2, #31
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d084      	beq.n	80036cc <HAL_RCC_OscConfig+0x9c8>
 80037c2:	e07f      	b.n	80038c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7fd fdbc 	bl	8001340 <HAL_GetTick>
 80037c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fdb7 	bl	8001340 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2c4      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003812:	2202      	movs	r2, #2
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800382c:	601a      	str	r2, [r3, #0]
  return result;
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003836:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d102      	bne.n	8003852 <HAL_RCC_OscConfig+0xb4e>
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	e013      	b.n	800387a <HAL_RCC_OscConfig+0xb76>
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800385a:	2202      	movs	r2, #2
 800385c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003882:	2102      	movs	r1, #2
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	fa92 f1a2 	rbit	r1, r2
 8003894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003898:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800389c:	6011      	str	r1, [r2, #0]
  return result;
 800389e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f002 021f 	and.w	r2, r2, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d184      	bne.n	80037ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b23      	ldr	r3, [pc, #140]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4a22      	ldr	r2, [pc, #136]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8242 	beq.w	8003d6e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_RCC_OscConfig+0xc58>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	f000 8213 	beq.w	8003d1e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2b02      	cmp	r3, #2
 8003906:	f040 8162 	bne.w	8003bce <HAL_RCC_OscConfig+0xeca>
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003912:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800392e:	601a      	str	r2, [r3, #0]
  return result;
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003938:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	461a      	mov	r2, r3
 800394c:	2300      	movs	r3, #0
 800394e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fd fcf6 	bl	8001340 <HAL_GetTick>
 8003954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003958:	e00c      	b.n	8003974 <HAL_RCC_OscConfig+0xc70>
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fcee 	bl	8001340 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1fd      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800397c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003998:	601a      	str	r2, [r3, #0]
  return result;
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80039a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0xcba>
 80039b8:	4bb0      	ldr	r3, [pc, #704]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e027      	b.n	8003a0e <HAL_RCC_OscConfig+0xd0a>
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a12:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a1a:	6011      	str	r1, [r2, #0]
 8003a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a20:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	fa92 f1a2 	rbit	r1, r2
 8003a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a32:	6011      	str	r1, [r2, #0]
  return result;
 8003a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a38:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	fab2 f282 	clz	r2, r2
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f042 0220 	orr.w	r2, r2, #32
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f002 021f 	and.w	r2, r2, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d182      	bne.n	8003960 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5a:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	497f      	ldr	r1, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f2a3 	rbit	r2, r3
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003aa6:	601a      	str	r2, [r3, #0]
  return result;
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ab0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fc3a 	bl	8001340 <HAL_GetTick>
 8003acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad0:	e009      	b.n	8003ae6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fd fc35 	bl	8001340 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e144      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	fa93 f2a3 	rbit	r2, r3
 8003b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b06:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b0a:	601a      	str	r2, [r3, #0]
  return result;
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_OscConfig+0xe2c>
 8003b2a:	4b54      	ldr	r3, [pc, #336]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	e027      	b.n	8003b80 <HAL_RCC_OscConfig+0xe7c>
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b50:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b84:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b8c:	6011      	str	r1, [r2, #0]
 8003b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b92:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	fa92 f1a2 	rbit	r1, r2
 8003b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ba0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ba4:	6011      	str	r1, [r2, #0]
  return result;
 8003ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003baa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	fab2 f282 	clz	r2, r2
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	f042 0220 	orr.w	r2, r2, #32
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	f002 021f 	and.w	r2, r2, #31
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d082      	beq.n	8003ad2 <HAL_RCC_OscConfig+0xdce>
 8003bcc:	e0cf      	b.n	8003d6e <HAL_RCC_OscConfig+0x106a>
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	fa93 f2a3 	rbit	r2, r3
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bf2:	601a      	str	r2, [r3, #0]
  return result;
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd fb94 	bl	8001340 <HAL_GetTick>
 8003c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1c:	e009      	b.n	8003c32 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fd fb8f 	bl	8001340 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e09e      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	fa93 f2a3 	rbit	r2, r3
 8003c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c56:	601a      	str	r2, [r3, #0]
  return result;
 8003c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d104      	bne.n	8003c80 <HAL_RCC_OscConfig+0xf7c>
 8003c76:	4b01      	ldr	r3, [pc, #4]	; (8003c7c <HAL_RCC_OscConfig+0xf78>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	e029      	b.n	8003cd0 <HAL_RCC_OscConfig+0xfcc>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c84:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	fa93 f2a3 	rbit	r2, r3
 8003c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	fa93 f2a3 	rbit	r2, r3
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <HAL_RCC_OscConfig+0x1078>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cd4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cdc:	6011      	str	r1, [r2, #0]
 8003cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	fa92 f1a2 	rbit	r1, r2
 8003cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cf4:	6011      	str	r1, [r2, #0]
  return result;
 8003cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	fab2 f282 	clz	r2, r2
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	f042 0220 	orr.w	r2, r2, #32
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f002 021f 	and.w	r2, r2, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d180      	bne.n	8003c1e <HAL_RCC_OscConfig+0xf1a>
 8003d1c:	e027      	b.n	8003d6e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e01e      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_OscConfig+0x1078>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d10b      	bne.n	8003d6a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000

08003d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b09e      	sub	sp, #120	; 0x78
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e162      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b90      	ldr	r3, [pc, #576]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d910      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	498b      	ldr	r1, [pc, #556]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b89      	ldr	r3, [pc, #548]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e14a      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd4:	4b82      	ldr	r3, [pc, #520]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	497f      	ldr	r1, [pc, #508]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80dc 	beq.w	8003fac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d13c      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xf6>
 8003dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0c:	fab3 f383 	clz	r3, r3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xa6>
 8003e20:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	e00f      	b.n	8003e46 <HAL_RCC_ClockConfig+0xc6>
 8003e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	667b      	str	r3, [r7, #100]	; 0x64
 8003e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e38:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e42:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e4e:	fa92 f2a2 	rbit	r2, r2
 8003e52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e56:	fab2 f282 	clz	r2, r2
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f042 0220 	orr.w	r2, r2, #32
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	f002 021f 	and.w	r2, r2, #31
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d17b      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0f3      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d13c      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x178>
 8003e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d102      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x128>
 8003ea2:	4b4f      	ldr	r3, [pc, #316]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	e00f      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
 8003ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	4b46      	ldr	r3, [pc, #280]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ecc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed0:	fa92 f2a2 	rbit	r2, r2
 8003ed4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed8:	fab2 f282 	clz	r2, r2
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	f042 0220 	orr.w	r2, r2, #32
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	f002 021f 	and.w	r2, r2, #31
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f202 	lsl.w	r2, r1, r2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d13a      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b2      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x1a0>
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	e00d      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1bc>
 8003f20:	2302      	movs	r3, #2
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	61ba      	str	r2, [r7, #24]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	fa92 f2a2 	rbit	r2, r2
 8003f46:	617a      	str	r2, [r7, #20]
  return result;
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	fab2 f282 	clz	r2, r2
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	f042 0220 	orr.w	r2, r2, #32
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	f002 021f 	and.w	r2, r2, #31
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e079      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	491a      	ldr	r1, [pc, #104]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd f9e0 	bl	8001340 <HAL_GetTick>
 8003f80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fd f9dc 	bl	8001340 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e061      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d214      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 0207 	bic.w	r2, r3, #7
 8003fc2:	4906      	ldr	r1, [pc, #24]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <HAL_RCC_ClockConfig+0x25c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e040      	b.n	800405e <HAL_RCC_ClockConfig+0x2de>
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_ClockConfig+0x2e8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	491a      	ldr	r1, [pc, #104]	; (8004068 <HAL_RCC_ClockConfig+0x2e8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_RCC_ClockConfig+0x2e8>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4912      	ldr	r1, [pc, #72]	; (8004068 <HAL_RCC_ClockConfig+0x2e8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004022:	f000 f829 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8004026:	4601      	mov	r1, r0
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RCC_ClockConfig+0x2e8>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004030:	22f0      	movs	r2, #240	; 0xf0
 8004032:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	fa92 f2a2 	rbit	r2, r2
 800403a:	60fa      	str	r2, [r7, #12]
  return result;
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	fab2 f282 	clz	r2, r2
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	40d3      	lsrs	r3, r2
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x2ec>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	fa21 f303 	lsr.w	r3, r1, r3
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <HAL_RCC_ClockConfig+0x2f0>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_RCC_ClockConfig+0x2f4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd f92e 	bl	80012b8 <HAL_InitTick>
  
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3778      	adds	r7, #120	; 0x78
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	08005b30 	.word	0x08005b30
 8004070:	20000000 	.word	0x20000000
 8004074:	20000004 	.word	0x20000004

08004078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	b08b      	sub	sp, #44	; 0x2c
 800407c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004092:	4b29      	ldr	r3, [pc, #164]	; (8004138 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x30>
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x36>
 80040a6:	e03c      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_GetSysClockFreq+0xc4>)
 80040aa:	623b      	str	r3, [r7, #32]
      break;
 80040ac:	e03c      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	fa92 f2a2 	rbit	r2, r2
 80040c0:	607a      	str	r2, [r7, #4]
  return result;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	fab2 f282 	clz	r2, r2
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	40d3      	lsrs	r3, r2
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	220f      	movs	r2, #15
 80040dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	fa92 f2a2 	rbit	r2, r2
 80040e4:	60fa      	str	r2, [r7, #12]
  return result;
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	fab2 f282 	clz	r2, r2
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	40d3      	lsrs	r3, r2
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004100:	4a0e      	ldr	r2, [pc, #56]	; (800413c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	fbb2 f2f3 	udiv	r2, r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
 8004110:	e004      	b.n	800411c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	623b      	str	r3, [r7, #32]
      break;
 8004120:	e002      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004124:	623b      	str	r3, [r7, #32]
      break;
 8004126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004128:	6a3b      	ldr	r3, [r7, #32]
}
 800412a:	4618      	mov	r0, r3
 800412c:	372c      	adds	r7, #44	; 0x2c
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	007a1200 	.word	0x007a1200
 8004140:	08005b40 	.word	0x08005b40
 8004144:	08005b50 	.word	0x08005b50
 8004148:	003d0900 	.word	0x003d0900

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b092      	sub	sp, #72	; 0x48
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80d4 	beq.w	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004170:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10e      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417c:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	61d3      	str	r3, [r2, #28]
 8004188:	4b48      	ldr	r3, [pc, #288]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d118      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a41      	ldr	r2, [pc, #260]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7fd f8c5 	bl	8001340 <HAL_GetTick>
 80041b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fd f8c1 	bl	8001340 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e14b      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8084 	beq.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d07c      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f8:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	461a      	mov	r2, r3
 8004222:	2301      	movs	r3, #1
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800422a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	461a      	mov	r2, r3
 8004246:	2300      	movs	r3, #0
 8004248:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04b      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fd f871 	bl	8001340 <HAL_GetTick>
 800425e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd f86d 	bl	8001340 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0f5      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004278:	2302      	movs	r3, #2
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
 8004284:	2302      	movs	r3, #2
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	61fb      	str	r3, [r7, #28]
  return result;
 8004290:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d108      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042a6:	4b01      	ldr	r3, [pc, #4]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	e00d      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	10908100 	.word	0x10908100
 80042b8:	2302      	movs	r3, #2
 80042ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	4b69      	ldr	r3, [pc, #420]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2202      	movs	r2, #2
 80042ca:	613a      	str	r2, [r7, #16]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	fa92 f2a2 	rbit	r2, r2
 80042d2:	60fa      	str	r2, [r7, #12]
  return result;
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	fab2 f282 	clz	r2, r2
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f002 021f 	and.w	r2, r2, #31
 80042e6:	2101      	movs	r1, #1
 80042e8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0b7      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042f2:	4b5e      	ldr	r3, [pc, #376]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	495b      	ldr	r1, [pc, #364]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004300:	4313      	orrs	r3, r2
 8004302:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004304:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a56      	ldr	r2, [pc, #344]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004324:	4b51      	ldr	r3, [pc, #324]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f023 0203 	bic.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	494e      	ldr	r1, [pc, #312]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004332:	4313      	orrs	r3, r2
 8004334:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004342:	4b4a      	ldr	r3, [pc, #296]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f023 0210 	bic.w	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4947      	ldr	r1, [pc, #284]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004350:	4313      	orrs	r3, r2
 8004352:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004360:	4b42      	ldr	r3, [pc, #264]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	493f      	ldr	r1, [pc, #252]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	f023 0220 	bic.w	r2, r3, #32
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4938      	ldr	r1, [pc, #224]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800438c:	4313      	orrs	r3, r2
 800438e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800439c:	4b33      	ldr	r3, [pc, #204]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4930      	ldr	r1, [pc, #192]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4929      	ldr	r1, [pc, #164]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4921      	ldr	r1, [pc, #132]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	491a      	ldr	r1, [pc, #104]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004404:	4313      	orrs	r3, r2
 8004406:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	4912      	ldr	r1, [pc, #72]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004422:	4313      	orrs	r3, r2
 8004424:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	490b      	ldr	r1, [pc, #44]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004440:	4313      	orrs	r3, r2
 8004442:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800445e:	4313      	orrs	r3, r2
 8004460:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3748      	adds	r7, #72	; 0x48
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000

08004470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e049      	b.n	8004516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc fe60 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 f94c 	bl	800474c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d001      	beq.n	8004538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e033      	b.n	80045a0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_TIM_Base_Start+0x8c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIM_Base_Start+0x3e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d004      	beq.n	800455e <HAL_TIM_Base_Start+0x3e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <HAL_TIM_Base_Start+0x90>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d115      	bne.n	800458a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_TIM_Base_Start+0x94>)
 8004566:	4013      	ands	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b06      	cmp	r3, #6
 800456e:	d015      	beq.n	800459c <HAL_TIM_Base_Start+0x7c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004576:	d011      	beq.n	800459c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	e008      	b.n	800459c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e000      	b.n	800459e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	00010007 	.word	0x00010007

080045b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_ConfigClockSource+0x1c>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e0b6      	b.n	8004742 <HAL_TIM_ConfigClockSource+0x18a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d03e      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0xd8>
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004616:	f200 8087 	bhi.w	8004728 <HAL_TIM_ConfigClockSource+0x170>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	f000 8086 	beq.w	800472e <HAL_TIM_ConfigClockSource+0x176>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d87f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004628:	2b70      	cmp	r3, #112	; 0x70
 800462a:	d01a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xaa>
 800462c:	2b70      	cmp	r3, #112	; 0x70
 800462e:	d87b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004630:	2b60      	cmp	r3, #96	; 0x60
 8004632:	d050      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x11e>
 8004634:	2b60      	cmp	r3, #96	; 0x60
 8004636:	d877      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004638:	2b50      	cmp	r3, #80	; 0x50
 800463a:	d03c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xfe>
 800463c:	2b50      	cmp	r3, #80	; 0x50
 800463e:	d873      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d058      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x13e>
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d86f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004648:	2b30      	cmp	r3, #48	; 0x30
 800464a:	d064      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15e>
 800464c:	2b30      	cmp	r3, #48	; 0x30
 800464e:	d86b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d060      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15e>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d867      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15e>
 800465c:	2b10      	cmp	r3, #16
 800465e:	d05a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15e>
 8004660:	e062      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 f953 	bl	800491c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]
      break;
 800468e:	e04f      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f000 f93c 	bl	800491c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b2:	609a      	str	r2, [r3, #8]
      break;
 80046b4:	e03c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 f8b0 	bl	8004828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2150      	movs	r1, #80	; 0x50
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f909 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80046d4:	e02c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 f8cf 	bl	8004886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2160      	movs	r1, #96	; 0x60
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f8f9 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80046f4:	e01c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f890 	bl	8004828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f8e9 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004714:	e00c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 f8e0 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004726:	e003      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e000      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800472e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <TIM_Base_SetConfig+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x20>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <TIM_Base_SetConfig+0xcc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_Base_SetConfig+0x5a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0x5a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a22      	ldr	r2, [pc, #136]	; (800481c <TIM_Base_SetConfig+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0x5a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a21      	ldr	r2, [pc, #132]	; (8004820 <TIM_Base_SetConfig+0xd4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0x5a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a20      	ldr	r2, [pc, #128]	; (8004824 <TIM_Base_SetConfig+0xd8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <TIM_Base_SetConfig+0xcc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0xb0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a0d      	ldr	r2, [pc, #52]	; (800481c <TIM_Base_SetConfig+0xd0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a0c      	ldr	r2, [pc, #48]	; (8004820 <TIM_Base_SetConfig+0xd4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <TIM_Base_SetConfig+0xd8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d103      	bne.n	8004804 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	615a      	str	r2, [r3, #20]
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800

08004828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 030a 	bic.w	r3, r3, #10
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0210 	bic.w	r2, r3, #16
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	031b      	lsls	r3, r3, #12
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	f043 0307 	orr.w	r3, r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	431a      	orrs	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e04f      	b.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d108      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d004      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40014000 	.word	0x40014000

08004a28 <__libc_init_array>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4d0d      	ldr	r5, [pc, #52]	; (8004a60 <__libc_init_array+0x38>)
 8004a2c:	4c0d      	ldr	r4, [pc, #52]	; (8004a64 <__libc_init_array+0x3c>)
 8004a2e:	1b64      	subs	r4, r4, r5
 8004a30:	10a4      	asrs	r4, r4, #2
 8004a32:	2600      	movs	r6, #0
 8004a34:	42a6      	cmp	r6, r4
 8004a36:	d109      	bne.n	8004a4c <__libc_init_array+0x24>
 8004a38:	4d0b      	ldr	r5, [pc, #44]	; (8004a68 <__libc_init_array+0x40>)
 8004a3a:	4c0c      	ldr	r4, [pc, #48]	; (8004a6c <__libc_init_array+0x44>)
 8004a3c:	f001 f86a 	bl	8005b14 <_init>
 8004a40:	1b64      	subs	r4, r4, r5
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	2600      	movs	r6, #0
 8004a46:	42a6      	cmp	r6, r4
 8004a48:	d105      	bne.n	8004a56 <__libc_init_array+0x2e>
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a50:	4798      	blx	r3
 8004a52:	3601      	adds	r6, #1
 8004a54:	e7ee      	b.n	8004a34 <__libc_init_array+0xc>
 8004a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5a:	4798      	blx	r3
 8004a5c:	3601      	adds	r6, #1
 8004a5e:	e7f2      	b.n	8004a46 <__libc_init_array+0x1e>
 8004a60:	08005d38 	.word	0x08005d38
 8004a64:	08005d38 	.word	0x08005d38
 8004a68:	08005d38 	.word	0x08005d38
 8004a6c:	08005d3c 	.word	0x08005d3c

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <sin>:
 8004a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a82:	ec53 2b10 	vmov	r2, r3, d0
 8004a86:	4828      	ldr	r0, [pc, #160]	; (8004b28 <sin+0xa8>)
 8004a88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a8c:	4281      	cmp	r1, r0
 8004a8e:	dc07      	bgt.n	8004aa0 <sin+0x20>
 8004a90:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004b20 <sin+0xa0>
 8004a94:	2000      	movs	r0, #0
 8004a96:	b005      	add	sp, #20
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	f000 be6c 	b.w	8005778 <__kernel_sin>
 8004aa0:	4822      	ldr	r0, [pc, #136]	; (8004b2c <sin+0xac>)
 8004aa2:	4281      	cmp	r1, r0
 8004aa4:	dd09      	ble.n	8004aba <sin+0x3a>
 8004aa6:	ee10 0a10 	vmov	r0, s0
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7fb fb90 	bl	80001d0 <__aeabi_dsub>
 8004ab0:	ec41 0b10 	vmov	d0, r0, r1
 8004ab4:	b005      	add	sp, #20
 8004ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004aba:	4668      	mov	r0, sp
 8004abc:	f000 f838 	bl	8004b30 <__ieee754_rem_pio2>
 8004ac0:	f000 0003 	and.w	r0, r0, #3
 8004ac4:	2801      	cmp	r0, #1
 8004ac6:	d00c      	beq.n	8004ae2 <sin+0x62>
 8004ac8:	2802      	cmp	r0, #2
 8004aca:	d011      	beq.n	8004af0 <sin+0x70>
 8004acc:	b9f0      	cbnz	r0, 8004b0c <sin+0x8c>
 8004ace:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ad2:	ed9d 0b00 	vldr	d0, [sp]
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f000 fe4e 	bl	8005778 <__kernel_sin>
 8004adc:	ec51 0b10 	vmov	r0, r1, d0
 8004ae0:	e7e6      	b.n	8004ab0 <sin+0x30>
 8004ae2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ae6:	ed9d 0b00 	vldr	d0, [sp]
 8004aea:	f000 fa2d 	bl	8004f48 <__kernel_cos>
 8004aee:	e7f5      	b.n	8004adc <sin+0x5c>
 8004af0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004af4:	ed9d 0b00 	vldr	d0, [sp]
 8004af8:	2001      	movs	r0, #1
 8004afa:	f000 fe3d 	bl	8005778 <__kernel_sin>
 8004afe:	ec53 2b10 	vmov	r2, r3, d0
 8004b02:	ee10 0a10 	vmov	r0, s0
 8004b06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004b0a:	e7d1      	b.n	8004ab0 <sin+0x30>
 8004b0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b10:	ed9d 0b00 	vldr	d0, [sp]
 8004b14:	f000 fa18 	bl	8004f48 <__kernel_cos>
 8004b18:	e7f1      	b.n	8004afe <sin+0x7e>
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w
	...
 8004b28:	3fe921fb 	.word	0x3fe921fb
 8004b2c:	7fefffff 	.word	0x7fefffff

08004b30 <__ieee754_rem_pio2>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	ed2d 8b02 	vpush	{d8}
 8004b38:	ec55 4b10 	vmov	r4, r5, d0
 8004b3c:	4bca      	ldr	r3, [pc, #808]	; (8004e68 <__ieee754_rem_pio2+0x338>)
 8004b3e:	b08b      	sub	sp, #44	; 0x2c
 8004b40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004b44:	4598      	cmp	r8, r3
 8004b46:	4682      	mov	sl, r0
 8004b48:	9502      	str	r5, [sp, #8]
 8004b4a:	dc08      	bgt.n	8004b5e <__ieee754_rem_pio2+0x2e>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2300      	movs	r3, #0
 8004b50:	ed80 0b00 	vstr	d0, [r0]
 8004b54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004b58:	f04f 0b00 	mov.w	fp, #0
 8004b5c:	e028      	b.n	8004bb0 <__ieee754_rem_pio2+0x80>
 8004b5e:	4bc3      	ldr	r3, [pc, #780]	; (8004e6c <__ieee754_rem_pio2+0x33c>)
 8004b60:	4598      	cmp	r8, r3
 8004b62:	dc78      	bgt.n	8004c56 <__ieee754_rem_pio2+0x126>
 8004b64:	9b02      	ldr	r3, [sp, #8]
 8004b66:	4ec2      	ldr	r6, [pc, #776]	; (8004e70 <__ieee754_rem_pio2+0x340>)
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	ee10 0a10 	vmov	r0, s0
 8004b6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004e30 <__ieee754_rem_pio2+0x300>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	4629      	mov	r1, r5
 8004b76:	dd39      	ble.n	8004bec <__ieee754_rem_pio2+0xbc>
 8004b78:	f7fb fb2a 	bl	80001d0 <__aeabi_dsub>
 8004b7c:	45b0      	cmp	r8, r6
 8004b7e:	4604      	mov	r4, r0
 8004b80:	460d      	mov	r5, r1
 8004b82:	d01b      	beq.n	8004bbc <__ieee754_rem_pio2+0x8c>
 8004b84:	a3ac      	add	r3, pc, #688	; (adr r3, 8004e38 <__ieee754_rem_pio2+0x308>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fb21 	bl	80001d0 <__aeabi_dsub>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	e9ca 2300 	strd	r2, r3, [sl]
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7fb fb19 	bl	80001d0 <__aeabi_dsub>
 8004b9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004e38 <__ieee754_rem_pio2+0x308>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fb14 	bl	80001d0 <__aeabi_dsub>
 8004ba8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004bac:	f04f 0b01 	mov.w	fp, #1
 8004bb0:	4658      	mov	r0, fp
 8004bb2:	b00b      	add	sp, #44	; 0x2c
 8004bb4:	ecbd 8b02 	vpop	{d8}
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004e40 <__ieee754_rem_pio2+0x310>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb fb05 	bl	80001d0 <__aeabi_dsub>
 8004bc6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004e48 <__ieee754_rem_pio2+0x318>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	4604      	mov	r4, r0
 8004bce:	460d      	mov	r5, r1
 8004bd0:	f7fb fafe 	bl	80001d0 <__aeabi_dsub>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	e9ca 2300 	strd	r2, r3, [sl]
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb faf6 	bl	80001d0 <__aeabi_dsub>
 8004be4:	a398      	add	r3, pc, #608	; (adr r3, 8004e48 <__ieee754_rem_pio2+0x318>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	e7db      	b.n	8004ba4 <__ieee754_rem_pio2+0x74>
 8004bec:	f7fb faf2 	bl	80001d4 <__adddf3>
 8004bf0:	45b0      	cmp	r8, r6
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	d016      	beq.n	8004c26 <__ieee754_rem_pio2+0xf6>
 8004bf8:	a38f      	add	r3, pc, #572	; (adr r3, 8004e38 <__ieee754_rem_pio2+0x308>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fae9 	bl	80001d4 <__adddf3>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	e9ca 2300 	strd	r2, r3, [sl]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7fb fadf 	bl	80001d0 <__aeabi_dsub>
 8004c12:	a389      	add	r3, pc, #548	; (adr r3, 8004e38 <__ieee754_rem_pio2+0x308>)
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f7fb fadc 	bl	80001d4 <__adddf3>
 8004c1c:	f04f 3bff 	mov.w	fp, #4294967295
 8004c20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c24:	e7c4      	b.n	8004bb0 <__ieee754_rem_pio2+0x80>
 8004c26:	a386      	add	r3, pc, #536	; (adr r3, 8004e40 <__ieee754_rem_pio2+0x310>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb fad2 	bl	80001d4 <__adddf3>
 8004c30:	a385      	add	r3, pc, #532	; (adr r3, 8004e48 <__ieee754_rem_pio2+0x318>)
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	4604      	mov	r4, r0
 8004c38:	460d      	mov	r5, r1
 8004c3a:	f7fb facb 	bl	80001d4 <__adddf3>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	e9ca 2300 	strd	r2, r3, [sl]
 8004c46:	4620      	mov	r0, r4
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f7fb fac1 	bl	80001d0 <__aeabi_dsub>
 8004c4e:	a37e      	add	r3, pc, #504	; (adr r3, 8004e48 <__ieee754_rem_pio2+0x318>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	e7e0      	b.n	8004c18 <__ieee754_rem_pio2+0xe8>
 8004c56:	4b87      	ldr	r3, [pc, #540]	; (8004e74 <__ieee754_rem_pio2+0x344>)
 8004c58:	4598      	cmp	r8, r3
 8004c5a:	f300 80d9 	bgt.w	8004e10 <__ieee754_rem_pio2+0x2e0>
 8004c5e:	f000 fe49 	bl	80058f4 <fabs>
 8004c62:	ec55 4b10 	vmov	r4, r5, d0
 8004c66:	ee10 0a10 	vmov	r0, s0
 8004c6a:	a379      	add	r3, pc, #484	; (adr r3, 8004e50 <__ieee754_rem_pio2+0x320>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	4629      	mov	r1, r5
 8004c72:	f7fb fc65 	bl	8000540 <__aeabi_dmul>
 8004c76:	4b80      	ldr	r3, [pc, #512]	; (8004e78 <__ieee754_rem_pio2+0x348>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f7fb faab 	bl	80001d4 <__adddf3>
 8004c7e:	f7fb fef9 	bl	8000a74 <__aeabi_d2iz>
 8004c82:	4683      	mov	fp, r0
 8004c84:	f7fb fbf2 	bl	800046c <__aeabi_i2d>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	ec43 2b18 	vmov	d8, r2, r3
 8004c90:	a367      	add	r3, pc, #412	; (adr r3, 8004e30 <__ieee754_rem_pio2+0x300>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fc53 	bl	8000540 <__aeabi_dmul>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb fa95 	bl	80001d0 <__aeabi_dsub>
 8004ca6:	a364      	add	r3, pc, #400	; (adr r3, 8004e38 <__ieee754_rem_pio2+0x308>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	4606      	mov	r6, r0
 8004cae:	460f      	mov	r7, r1
 8004cb0:	ec51 0b18 	vmov	r0, r1, d8
 8004cb4:	f7fb fc44 	bl	8000540 <__aeabi_dmul>
 8004cb8:	f1bb 0f1f 	cmp.w	fp, #31
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	460d      	mov	r5, r1
 8004cc0:	dc0d      	bgt.n	8004cde <__ieee754_rem_pio2+0x1ae>
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	; (8004e7c <__ieee754_rem_pio2+0x34c>)
 8004cc4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ccc:	4543      	cmp	r3, r8
 8004cce:	d006      	beq.n	8004cde <__ieee754_rem_pio2+0x1ae>
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f7fb fa7a 	bl	80001d0 <__aeabi_dsub>
 8004cdc:	e00f      	b.n	8004cfe <__ieee754_rem_pio2+0x1ce>
 8004cde:	462b      	mov	r3, r5
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	f7fb fa73 	bl	80001d0 <__aeabi_dsub>
 8004cea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004cee:	9303      	str	r3, [sp, #12]
 8004cf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004cf4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004cf8:	f1b8 0f10 	cmp.w	r8, #16
 8004cfc:	dc02      	bgt.n	8004d04 <__ieee754_rem_pio2+0x1d4>
 8004cfe:	e9ca 0100 	strd	r0, r1, [sl]
 8004d02:	e039      	b.n	8004d78 <__ieee754_rem_pio2+0x248>
 8004d04:	a34e      	add	r3, pc, #312	; (adr r3, 8004e40 <__ieee754_rem_pio2+0x310>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	ec51 0b18 	vmov	r0, r1, d8
 8004d0e:	f7fb fc17 	bl	8000540 <__aeabi_dmul>
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	f7fb fa57 	bl	80001d0 <__aeabi_dsub>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4680      	mov	r8, r0
 8004d28:	4689      	mov	r9, r1
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	4639      	mov	r1, r7
 8004d2e:	f7fb fa4f 	bl	80001d0 <__aeabi_dsub>
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	f7fb fa4b 	bl	80001d0 <__aeabi_dsub>
 8004d3a:	a343      	add	r3, pc, #268	; (adr r3, 8004e48 <__ieee754_rem_pio2+0x318>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	4604      	mov	r4, r0
 8004d42:	460d      	mov	r5, r1
 8004d44:	ec51 0b18 	vmov	r0, r1, d8
 8004d48:	f7fb fbfa 	bl	8000540 <__aeabi_dmul>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	f7fb fa3e 	bl	80001d0 <__aeabi_dsub>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4604      	mov	r4, r0
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb fa36 	bl	80001d0 <__aeabi_dsub>
 8004d64:	9a03      	ldr	r2, [sp, #12]
 8004d66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b31      	cmp	r3, #49	; 0x31
 8004d6e:	dc24      	bgt.n	8004dba <__ieee754_rem_pio2+0x28a>
 8004d70:	e9ca 0100 	strd	r0, r1, [sl]
 8004d74:	4646      	mov	r6, r8
 8004d76:	464f      	mov	r7, r9
 8004d78:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4642      	mov	r2, r8
 8004d80:	464b      	mov	r3, r9
 8004d82:	4639      	mov	r1, r7
 8004d84:	f7fb fa24 	bl	80001d0 <__aeabi_dsub>
 8004d88:	462b      	mov	r3, r5
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	f7fb fa20 	bl	80001d0 <__aeabi_dsub>
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d98:	f6bf af0a 	bge.w	8004bb0 <__ieee754_rem_pio2+0x80>
 8004d9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004da0:	f8ca 3004 	str.w	r3, [sl, #4]
 8004da4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004da8:	f8ca 8000 	str.w	r8, [sl]
 8004dac:	f8ca 0008 	str.w	r0, [sl, #8]
 8004db0:	f8ca 300c 	str.w	r3, [sl, #12]
 8004db4:	f1cb 0b00 	rsb	fp, fp, #0
 8004db8:	e6fa      	b.n	8004bb0 <__ieee754_rem_pio2+0x80>
 8004dba:	a327      	add	r3, pc, #156	; (adr r3, 8004e58 <__ieee754_rem_pio2+0x328>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	ec51 0b18 	vmov	r0, r1, d8
 8004dc4:	f7fb fbbc 	bl	8000540 <__aeabi_dmul>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	460d      	mov	r5, r1
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	f7fb f9fc 	bl	80001d0 <__aeabi_dsub>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4606      	mov	r6, r0
 8004dde:	460f      	mov	r7, r1
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb f9f4 	bl	80001d0 <__aeabi_dsub>
 8004de8:	4622      	mov	r2, r4
 8004dea:	462b      	mov	r3, r5
 8004dec:	f7fb f9f0 	bl	80001d0 <__aeabi_dsub>
 8004df0:	a31b      	add	r3, pc, #108	; (adr r3, 8004e60 <__ieee754_rem_pio2+0x330>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
 8004dfa:	ec51 0b18 	vmov	r0, r1, d8
 8004dfe:	f7fb fb9f 	bl	8000540 <__aeabi_dmul>
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	f7fb f9e3 	bl	80001d0 <__aeabi_dsub>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	e75f      	b.n	8004cd0 <__ieee754_rem_pio2+0x1a0>
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <__ieee754_rem_pio2+0x350>)
 8004e12:	4598      	cmp	r8, r3
 8004e14:	dd36      	ble.n	8004e84 <__ieee754_rem_pio2+0x354>
 8004e16:	ee10 2a10 	vmov	r2, s0
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb f9d6 	bl	80001d0 <__aeabi_dsub>
 8004e24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e28:	e9ca 0100 	strd	r0, r1, [sl]
 8004e2c:	e694      	b.n	8004b58 <__ieee754_rem_pio2+0x28>
 8004e2e:	bf00      	nop
 8004e30:	54400000 	.word	0x54400000
 8004e34:	3ff921fb 	.word	0x3ff921fb
 8004e38:	1a626331 	.word	0x1a626331
 8004e3c:	3dd0b461 	.word	0x3dd0b461
 8004e40:	1a600000 	.word	0x1a600000
 8004e44:	3dd0b461 	.word	0x3dd0b461
 8004e48:	2e037073 	.word	0x2e037073
 8004e4c:	3ba3198a 	.word	0x3ba3198a
 8004e50:	6dc9c883 	.word	0x6dc9c883
 8004e54:	3fe45f30 	.word	0x3fe45f30
 8004e58:	2e000000 	.word	0x2e000000
 8004e5c:	3ba3198a 	.word	0x3ba3198a
 8004e60:	252049c1 	.word	0x252049c1
 8004e64:	397b839a 	.word	0x397b839a
 8004e68:	3fe921fb 	.word	0x3fe921fb
 8004e6c:	4002d97b 	.word	0x4002d97b
 8004e70:	3ff921fb 	.word	0x3ff921fb
 8004e74:	413921fb 	.word	0x413921fb
 8004e78:	3fe00000 	.word	0x3fe00000
 8004e7c:	08005b60 	.word	0x08005b60
 8004e80:	7fefffff 	.word	0x7fefffff
 8004e84:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004e88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004e8c:	ee10 0a10 	vmov	r0, s0
 8004e90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004e94:	ee10 6a10 	vmov	r6, s0
 8004e98:	460f      	mov	r7, r1
 8004e9a:	f7fb fdeb 	bl	8000a74 <__aeabi_d2iz>
 8004e9e:	f7fb fae5 	bl	800046c <__aeabi_i2d>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eae:	f7fb f98f 	bl	80001d0 <__aeabi_dsub>
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <__ieee754_rem_pio2+0x410>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f7fb fb43 	bl	8000540 <__aeabi_dmul>
 8004eba:	460f      	mov	r7, r1
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	f7fb fdd9 	bl	8000a74 <__aeabi_d2iz>
 8004ec2:	f7fb fad3 	bl	800046c <__aeabi_i2d>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4639      	mov	r1, r7
 8004ece:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ed2:	f7fb f97d 	bl	80001d0 <__aeabi_dsub>
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <__ieee754_rem_pio2+0x410>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f7fb fb31 	bl	8000540 <__aeabi_dmul>
 8004ede:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ee2:	ad04      	add	r5, sp, #16
 8004ee4:	f04f 0803 	mov.w	r8, #3
 8004ee8:	46a9      	mov	r9, r5
 8004eea:	2600      	movs	r6, #0
 8004eec:	2700      	movs	r7, #0
 8004eee:	4632      	mov	r2, r6
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004ef6:	46c3      	mov	fp, r8
 8004ef8:	3d08      	subs	r5, #8
 8004efa:	f108 38ff 	add.w	r8, r8, #4294967295
 8004efe:	f7fb fd87 	bl	8000a10 <__aeabi_dcmpeq>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d1f3      	bne.n	8004eee <__ieee754_rem_pio2+0x3be>
 8004f06:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <__ieee754_rem_pio2+0x414>)
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4622      	mov	r2, r4
 8004f10:	465b      	mov	r3, fp
 8004f12:	4651      	mov	r1, sl
 8004f14:	4648      	mov	r0, r9
 8004f16:	f000 f8df 	bl	80050d8 <__kernel_rem_pio2>
 8004f1a:	9b02      	ldr	r3, [sp, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	4683      	mov	fp, r0
 8004f20:	f6bf ae46 	bge.w	8004bb0 <__ieee754_rem_pio2+0x80>
 8004f24:	e9da 2100 	ldrd	r2, r1, [sl]
 8004f28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f2c:	e9ca 2300 	strd	r2, r3, [sl]
 8004f30:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004f34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f38:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004f3c:	e73a      	b.n	8004db4 <__ieee754_rem_pio2+0x284>
 8004f3e:	bf00      	nop
 8004f40:	41700000 	.word	0x41700000
 8004f44:	08005be0 	.word	0x08005be0

08004f48 <__kernel_cos>:
 8004f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	ec57 6b10 	vmov	r6, r7, d0
 8004f50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004f54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004f58:	ed8d 1b00 	vstr	d1, [sp]
 8004f5c:	da07      	bge.n	8004f6e <__kernel_cos+0x26>
 8004f5e:	ee10 0a10 	vmov	r0, s0
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb fd86 	bl	8000a74 <__aeabi_d2iz>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	f000 8088 	beq.w	800507e <__kernel_cos+0x136>
 8004f6e:	4632      	mov	r2, r6
 8004f70:	463b      	mov	r3, r7
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	f7fb fae3 	bl	8000540 <__aeabi_dmul>
 8004f7a:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <__kernel_cos+0x178>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	f7fb fadd 	bl	8000540 <__aeabi_dmul>
 8004f86:	a340      	add	r3, pc, #256	; (adr r3, 8005088 <__kernel_cos+0x140>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	468b      	mov	fp, r1
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb fad4 	bl	8000540 <__aeabi_dmul>
 8004f98:	a33d      	add	r3, pc, #244	; (adr r3, 8005090 <__kernel_cos+0x148>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb f919 	bl	80001d4 <__adddf3>
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	f7fb facb 	bl	8000540 <__aeabi_dmul>
 8004faa:	a33b      	add	r3, pc, #236	; (adr r3, 8005098 <__kernel_cos+0x150>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb f90e 	bl	80001d0 <__aeabi_dsub>
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	462b      	mov	r3, r5
 8004fb8:	f7fb fac2 	bl	8000540 <__aeabi_dmul>
 8004fbc:	a338      	add	r3, pc, #224	; (adr r3, 80050a0 <__kernel_cos+0x158>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb f907 	bl	80001d4 <__adddf3>
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	f7fb fab9 	bl	8000540 <__aeabi_dmul>
 8004fce:	a336      	add	r3, pc, #216	; (adr r3, 80050a8 <__kernel_cos+0x160>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb f8fc 	bl	80001d0 <__aeabi_dsub>
 8004fd8:	4622      	mov	r2, r4
 8004fda:	462b      	mov	r3, r5
 8004fdc:	f7fb fab0 	bl	8000540 <__aeabi_dmul>
 8004fe0:	a333      	add	r3, pc, #204	; (adr r3, 80050b0 <__kernel_cos+0x168>)
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f7fb f8f5 	bl	80001d4 <__adddf3>
 8004fea:	4622      	mov	r2, r4
 8004fec:	462b      	mov	r3, r5
 8004fee:	f7fb faa7 	bl	8000540 <__aeabi_dmul>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb faa3 	bl	8000540 <__aeabi_dmul>
 8004ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ffe:	4604      	mov	r4, r0
 8005000:	460d      	mov	r5, r1
 8005002:	4630      	mov	r0, r6
 8005004:	4639      	mov	r1, r7
 8005006:	f7fb fa9b 	bl	8000540 <__aeabi_dmul>
 800500a:	460b      	mov	r3, r1
 800500c:	4602      	mov	r2, r0
 800500e:	4629      	mov	r1, r5
 8005010:	4620      	mov	r0, r4
 8005012:	f7fb f8dd 	bl	80001d0 <__aeabi_dsub>
 8005016:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <__kernel_cos+0x17c>)
 8005018:	4598      	cmp	r8, r3
 800501a:	4606      	mov	r6, r0
 800501c:	460f      	mov	r7, r1
 800501e:	dc10      	bgt.n	8005042 <__kernel_cos+0xfa>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4650      	mov	r0, sl
 8005026:	4659      	mov	r1, fp
 8005028:	f7fb f8d2 	bl	80001d0 <__aeabi_dsub>
 800502c:	460b      	mov	r3, r1
 800502e:	4926      	ldr	r1, [pc, #152]	; (80050c8 <__kernel_cos+0x180>)
 8005030:	4602      	mov	r2, r0
 8005032:	2000      	movs	r0, #0
 8005034:	f7fb f8cc 	bl	80001d0 <__aeabi_dsub>
 8005038:	ec41 0b10 	vmov	d0, r0, r1
 800503c:	b003      	add	sp, #12
 800503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005042:	4b22      	ldr	r3, [pc, #136]	; (80050cc <__kernel_cos+0x184>)
 8005044:	4920      	ldr	r1, [pc, #128]	; (80050c8 <__kernel_cos+0x180>)
 8005046:	4598      	cmp	r8, r3
 8005048:	bfcc      	ite	gt
 800504a:	4d21      	ldrgt	r5, [pc, #132]	; (80050d0 <__kernel_cos+0x188>)
 800504c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005050:	2400      	movs	r4, #0
 8005052:	4622      	mov	r2, r4
 8005054:	462b      	mov	r3, r5
 8005056:	2000      	movs	r0, #0
 8005058:	f7fb f8ba 	bl	80001d0 <__aeabi_dsub>
 800505c:	4622      	mov	r2, r4
 800505e:	4680      	mov	r8, r0
 8005060:	4689      	mov	r9, r1
 8005062:	462b      	mov	r3, r5
 8005064:	4650      	mov	r0, sl
 8005066:	4659      	mov	r1, fp
 8005068:	f7fb f8b2 	bl	80001d0 <__aeabi_dsub>
 800506c:	4632      	mov	r2, r6
 800506e:	463b      	mov	r3, r7
 8005070:	f7fb f8ae 	bl	80001d0 <__aeabi_dsub>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4640      	mov	r0, r8
 800507a:	4649      	mov	r1, r9
 800507c:	e7da      	b.n	8005034 <__kernel_cos+0xec>
 800507e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80050b8 <__kernel_cos+0x170>
 8005082:	e7db      	b.n	800503c <__kernel_cos+0xf4>
 8005084:	f3af 8000 	nop.w
 8005088:	be8838d4 	.word	0xbe8838d4
 800508c:	bda8fae9 	.word	0xbda8fae9
 8005090:	bdb4b1c4 	.word	0xbdb4b1c4
 8005094:	3e21ee9e 	.word	0x3e21ee9e
 8005098:	809c52ad 	.word	0x809c52ad
 800509c:	3e927e4f 	.word	0x3e927e4f
 80050a0:	19cb1590 	.word	0x19cb1590
 80050a4:	3efa01a0 	.word	0x3efa01a0
 80050a8:	16c15177 	.word	0x16c15177
 80050ac:	3f56c16c 	.word	0x3f56c16c
 80050b0:	5555554c 	.word	0x5555554c
 80050b4:	3fa55555 	.word	0x3fa55555
 80050b8:	00000000 	.word	0x00000000
 80050bc:	3ff00000 	.word	0x3ff00000
 80050c0:	3fe00000 	.word	0x3fe00000
 80050c4:	3fd33332 	.word	0x3fd33332
 80050c8:	3ff00000 	.word	0x3ff00000
 80050cc:	3fe90000 	.word	0x3fe90000
 80050d0:	3fd20000 	.word	0x3fd20000
 80050d4:	00000000 	.word	0x00000000

080050d8 <__kernel_rem_pio2>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	ed2d 8b02 	vpush	{d8}
 80050e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80050e4:	f112 0f14 	cmn.w	r2, #20
 80050e8:	9308      	str	r3, [sp, #32]
 80050ea:	9101      	str	r1, [sp, #4]
 80050ec:	4bc4      	ldr	r3, [pc, #784]	; (8005400 <__kernel_rem_pio2+0x328>)
 80050ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80050f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80050f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	9b08      	ldr	r3, [sp, #32]
 80050fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80050fe:	bfa8      	it	ge
 8005100:	1ed4      	subge	r4, r2, #3
 8005102:	9306      	str	r3, [sp, #24]
 8005104:	bfb2      	itee	lt
 8005106:	2400      	movlt	r4, #0
 8005108:	2318      	movge	r3, #24
 800510a:	fb94 f4f3 	sdivge	r4, r4, r3
 800510e:	f06f 0317 	mvn.w	r3, #23
 8005112:	fb04 3303 	mla	r3, r4, r3, r3
 8005116:	eb03 0a02 	add.w	sl, r3, r2
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	9a06      	ldr	r2, [sp, #24]
 800511e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80053f0 <__kernel_rem_pio2+0x318>
 8005122:	eb03 0802 	add.w	r8, r3, r2
 8005126:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005128:	1aa7      	subs	r7, r4, r2
 800512a:	ae22      	add	r6, sp, #136	; 0x88
 800512c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005130:	2500      	movs	r5, #0
 8005132:	4545      	cmp	r5, r8
 8005134:	dd13      	ble.n	800515e <__kernel_rem_pio2+0x86>
 8005136:	9b08      	ldr	r3, [sp, #32]
 8005138:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80053f0 <__kernel_rem_pio2+0x318>
 800513c:	aa22      	add	r2, sp, #136	; 0x88
 800513e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005142:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	9b02      	ldr	r3, [sp, #8]
 800514c:	4598      	cmp	r8, r3
 800514e:	dc2f      	bgt.n	80051b0 <__kernel_rem_pio2+0xd8>
 8005150:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005154:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005158:	462f      	mov	r7, r5
 800515a:	2600      	movs	r6, #0
 800515c:	e01b      	b.n	8005196 <__kernel_rem_pio2+0xbe>
 800515e:	42ef      	cmn	r7, r5
 8005160:	d407      	bmi.n	8005172 <__kernel_rem_pio2+0x9a>
 8005162:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005166:	f7fb f981 	bl	800046c <__aeabi_i2d>
 800516a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800516e:	3501      	adds	r5, #1
 8005170:	e7df      	b.n	8005132 <__kernel_rem_pio2+0x5a>
 8005172:	ec51 0b18 	vmov	r0, r1, d8
 8005176:	e7f8      	b.n	800516a <__kernel_rem_pio2+0x92>
 8005178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005180:	f7fb f9de 	bl	8000540 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800518c:	f7fb f822 	bl	80001d4 <__adddf3>
 8005190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005194:	3601      	adds	r6, #1
 8005196:	9b06      	ldr	r3, [sp, #24]
 8005198:	429e      	cmp	r6, r3
 800519a:	f1a7 0708 	sub.w	r7, r7, #8
 800519e:	ddeb      	ble.n	8005178 <__kernel_rem_pio2+0xa0>
 80051a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80051a4:	f108 0801 	add.w	r8, r8, #1
 80051a8:	ecab 7b02 	vstmia	fp!, {d7}
 80051ac:	3508      	adds	r5, #8
 80051ae:	e7cc      	b.n	800514a <__kernel_rem_pio2+0x72>
 80051b0:	9b02      	ldr	r3, [sp, #8]
 80051b2:	aa0e      	add	r2, sp, #56	; 0x38
 80051b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051b8:	930d      	str	r3, [sp, #52]	; 0x34
 80051ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80051bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051c0:	9c02      	ldr	r4, [sp, #8]
 80051c2:	930c      	str	r3, [sp, #48]	; 0x30
 80051c4:	00e3      	lsls	r3, r4, #3
 80051c6:	930a      	str	r3, [sp, #40]	; 0x28
 80051c8:	ab9a      	add	r3, sp, #616	; 0x268
 80051ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80051d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80051d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80051d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80051dc:	46c3      	mov	fp, r8
 80051de:	46a1      	mov	r9, r4
 80051e0:	f1b9 0f00 	cmp.w	r9, #0
 80051e4:	f1a5 0508 	sub.w	r5, r5, #8
 80051e8:	dc77      	bgt.n	80052da <__kernel_rem_pio2+0x202>
 80051ea:	ec47 6b10 	vmov	d0, r6, r7
 80051ee:	4650      	mov	r0, sl
 80051f0:	f000 fc0a 	bl	8005a08 <scalbn>
 80051f4:	ec57 6b10 	vmov	r6, r7, d0
 80051f8:	2200      	movs	r2, #0
 80051fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80051fe:	ee10 0a10 	vmov	r0, s0
 8005202:	4639      	mov	r1, r7
 8005204:	f7fb f99c 	bl	8000540 <__aeabi_dmul>
 8005208:	ec41 0b10 	vmov	d0, r0, r1
 800520c:	f000 fb7c 	bl	8005908 <floor>
 8005210:	4b7c      	ldr	r3, [pc, #496]	; (8005404 <__kernel_rem_pio2+0x32c>)
 8005212:	ec51 0b10 	vmov	r0, r1, d0
 8005216:	2200      	movs	r2, #0
 8005218:	f7fb f992 	bl	8000540 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fa ffd4 	bl	80001d0 <__aeabi_dsub>
 8005228:	460f      	mov	r7, r1
 800522a:	4606      	mov	r6, r0
 800522c:	f7fb fc22 	bl	8000a74 <__aeabi_d2iz>
 8005230:	9004      	str	r0, [sp, #16]
 8005232:	f7fb f91b 	bl	800046c <__aeabi_i2d>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fa ffc7 	bl	80001d0 <__aeabi_dsub>
 8005242:	f1ba 0f00 	cmp.w	sl, #0
 8005246:	4606      	mov	r6, r0
 8005248:	460f      	mov	r7, r1
 800524a:	dd6d      	ble.n	8005328 <__kernel_rem_pio2+0x250>
 800524c:	1e62      	subs	r2, r4, #1
 800524e:	ab0e      	add	r3, sp, #56	; 0x38
 8005250:	9d04      	ldr	r5, [sp, #16]
 8005252:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005256:	f1ca 0118 	rsb	r1, sl, #24
 800525a:	fa40 f301 	asr.w	r3, r0, r1
 800525e:	441d      	add	r5, r3
 8005260:	408b      	lsls	r3, r1
 8005262:	1ac0      	subs	r0, r0, r3
 8005264:	ab0e      	add	r3, sp, #56	; 0x38
 8005266:	9504      	str	r5, [sp, #16]
 8005268:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800526c:	f1ca 0317 	rsb	r3, sl, #23
 8005270:	fa40 fb03 	asr.w	fp, r0, r3
 8005274:	f1bb 0f00 	cmp.w	fp, #0
 8005278:	dd65      	ble.n	8005346 <__kernel_rem_pio2+0x26e>
 800527a:	9b04      	ldr	r3, [sp, #16]
 800527c:	2200      	movs	r2, #0
 800527e:	3301      	adds	r3, #1
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	4615      	mov	r5, r2
 8005284:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005288:	4294      	cmp	r4, r2
 800528a:	f300 809c 	bgt.w	80053c6 <__kernel_rem_pio2+0x2ee>
 800528e:	f1ba 0f00 	cmp.w	sl, #0
 8005292:	dd07      	ble.n	80052a4 <__kernel_rem_pio2+0x1cc>
 8005294:	f1ba 0f01 	cmp.w	sl, #1
 8005298:	f000 80c0 	beq.w	800541c <__kernel_rem_pio2+0x344>
 800529c:	f1ba 0f02 	cmp.w	sl, #2
 80052a0:	f000 80c6 	beq.w	8005430 <__kernel_rem_pio2+0x358>
 80052a4:	f1bb 0f02 	cmp.w	fp, #2
 80052a8:	d14d      	bne.n	8005346 <__kernel_rem_pio2+0x26e>
 80052aa:	4632      	mov	r2, r6
 80052ac:	463b      	mov	r3, r7
 80052ae:	4956      	ldr	r1, [pc, #344]	; (8005408 <__kernel_rem_pio2+0x330>)
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fa ff8d 	bl	80001d0 <__aeabi_dsub>
 80052b6:	4606      	mov	r6, r0
 80052b8:	460f      	mov	r7, r1
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	d043      	beq.n	8005346 <__kernel_rem_pio2+0x26e>
 80052be:	4650      	mov	r0, sl
 80052c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80053f8 <__kernel_rem_pio2+0x320>
 80052c4:	f000 fba0 	bl	8005a08 <scalbn>
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	ec53 2b10 	vmov	r2, r3, d0
 80052d0:	f7fa ff7e 	bl	80001d0 <__aeabi_dsub>
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	e035      	b.n	8005346 <__kernel_rem_pio2+0x26e>
 80052da:	4b4c      	ldr	r3, [pc, #304]	; (800540c <__kernel_rem_pio2+0x334>)
 80052dc:	2200      	movs	r2, #0
 80052de:	4630      	mov	r0, r6
 80052e0:	4639      	mov	r1, r7
 80052e2:	f7fb f92d 	bl	8000540 <__aeabi_dmul>
 80052e6:	f7fb fbc5 	bl	8000a74 <__aeabi_d2iz>
 80052ea:	f7fb f8bf 	bl	800046c <__aeabi_i2d>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	ec43 2b18 	vmov	d8, r2, r3
 80052f6:	4b46      	ldr	r3, [pc, #280]	; (8005410 <__kernel_rem_pio2+0x338>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	f7fb f921 	bl	8000540 <__aeabi_dmul>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fa ff63 	bl	80001d0 <__aeabi_dsub>
 800530a:	f7fb fbb3 	bl	8000a74 <__aeabi_d2iz>
 800530e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005312:	f84b 0b04 	str.w	r0, [fp], #4
 8005316:	ec51 0b18 	vmov	r0, r1, d8
 800531a:	f7fa ff5b 	bl	80001d4 <__adddf3>
 800531e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005322:	4606      	mov	r6, r0
 8005324:	460f      	mov	r7, r1
 8005326:	e75b      	b.n	80051e0 <__kernel_rem_pio2+0x108>
 8005328:	d106      	bne.n	8005338 <__kernel_rem_pio2+0x260>
 800532a:	1e63      	subs	r3, r4, #1
 800532c:	aa0e      	add	r2, sp, #56	; 0x38
 800532e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005332:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005336:	e79d      	b.n	8005274 <__kernel_rem_pio2+0x19c>
 8005338:	4b36      	ldr	r3, [pc, #216]	; (8005414 <__kernel_rem_pio2+0x33c>)
 800533a:	2200      	movs	r2, #0
 800533c:	f7fb fb86 	bl	8000a4c <__aeabi_dcmpge>
 8005340:	2800      	cmp	r0, #0
 8005342:	d13d      	bne.n	80053c0 <__kernel_rem_pio2+0x2e8>
 8005344:	4683      	mov	fp, r0
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	4630      	mov	r0, r6
 800534c:	4639      	mov	r1, r7
 800534e:	f7fb fb5f 	bl	8000a10 <__aeabi_dcmpeq>
 8005352:	2800      	cmp	r0, #0
 8005354:	f000 80c0 	beq.w	80054d8 <__kernel_rem_pio2+0x400>
 8005358:	1e65      	subs	r5, r4, #1
 800535a:	462b      	mov	r3, r5
 800535c:	2200      	movs	r2, #0
 800535e:	9902      	ldr	r1, [sp, #8]
 8005360:	428b      	cmp	r3, r1
 8005362:	da6c      	bge.n	800543e <__kernel_rem_pio2+0x366>
 8005364:	2a00      	cmp	r2, #0
 8005366:	f000 8089 	beq.w	800547c <__kernel_rem_pio2+0x3a4>
 800536a:	ab0e      	add	r3, sp, #56	; 0x38
 800536c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005370:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80ad 	beq.w	80054d4 <__kernel_rem_pio2+0x3fc>
 800537a:	4650      	mov	r0, sl
 800537c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80053f8 <__kernel_rem_pio2+0x320>
 8005380:	f000 fb42 	bl	8005a08 <scalbn>
 8005384:	ab9a      	add	r3, sp, #616	; 0x268
 8005386:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800538a:	ec57 6b10 	vmov	r6, r7, d0
 800538e:	00ec      	lsls	r4, r5, #3
 8005390:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005394:	46aa      	mov	sl, r5
 8005396:	f1ba 0f00 	cmp.w	sl, #0
 800539a:	f280 80d6 	bge.w	800554a <__kernel_rem_pio2+0x472>
 800539e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80053f0 <__kernel_rem_pio2+0x318>
 80053a2:	462e      	mov	r6, r5
 80053a4:	2e00      	cmp	r6, #0
 80053a6:	f2c0 8104 	blt.w	80055b2 <__kernel_rem_pio2+0x4da>
 80053aa:	ab72      	add	r3, sp, #456	; 0x1c8
 80053ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 80053b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005418 <__kernel_rem_pio2+0x340>
 80053b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80053b8:	f04f 0800 	mov.w	r8, #0
 80053bc:	1baf      	subs	r7, r5, r6
 80053be:	e0ea      	b.n	8005596 <__kernel_rem_pio2+0x4be>
 80053c0:	f04f 0b02 	mov.w	fp, #2
 80053c4:	e759      	b.n	800527a <__kernel_rem_pio2+0x1a2>
 80053c6:	f8d8 3000 	ldr.w	r3, [r8]
 80053ca:	b955      	cbnz	r5, 80053e2 <__kernel_rem_pio2+0x30a>
 80053cc:	b123      	cbz	r3, 80053d8 <__kernel_rem_pio2+0x300>
 80053ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80053d2:	f8c8 3000 	str.w	r3, [r8]
 80053d6:	2301      	movs	r3, #1
 80053d8:	3201      	adds	r2, #1
 80053da:	f108 0804 	add.w	r8, r8, #4
 80053de:	461d      	mov	r5, r3
 80053e0:	e752      	b.n	8005288 <__kernel_rem_pio2+0x1b0>
 80053e2:	1acb      	subs	r3, r1, r3
 80053e4:	f8c8 3000 	str.w	r3, [r8]
 80053e8:	462b      	mov	r3, r5
 80053ea:	e7f5      	b.n	80053d8 <__kernel_rem_pio2+0x300>
 80053ec:	f3af 8000 	nop.w
	...
 80053fc:	3ff00000 	.word	0x3ff00000
 8005400:	08005d28 	.word	0x08005d28
 8005404:	40200000 	.word	0x40200000
 8005408:	3ff00000 	.word	0x3ff00000
 800540c:	3e700000 	.word	0x3e700000
 8005410:	41700000 	.word	0x41700000
 8005414:	3fe00000 	.word	0x3fe00000
 8005418:	08005ce8 	.word	0x08005ce8
 800541c:	1e62      	subs	r2, r4, #1
 800541e:	ab0e      	add	r3, sp, #56	; 0x38
 8005420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005424:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005428:	a90e      	add	r1, sp, #56	; 0x38
 800542a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800542e:	e739      	b.n	80052a4 <__kernel_rem_pio2+0x1cc>
 8005430:	1e62      	subs	r2, r4, #1
 8005432:	ab0e      	add	r3, sp, #56	; 0x38
 8005434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005438:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800543c:	e7f4      	b.n	8005428 <__kernel_rem_pio2+0x350>
 800543e:	a90e      	add	r1, sp, #56	; 0x38
 8005440:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005444:	3b01      	subs	r3, #1
 8005446:	430a      	orrs	r2, r1
 8005448:	e789      	b.n	800535e <__kernel_rem_pio2+0x286>
 800544a:	3301      	adds	r3, #1
 800544c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005450:	2900      	cmp	r1, #0
 8005452:	d0fa      	beq.n	800544a <__kernel_rem_pio2+0x372>
 8005454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005456:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800545a:	446a      	add	r2, sp
 800545c:	3a98      	subs	r2, #152	; 0x98
 800545e:	920a      	str	r2, [sp, #40]	; 0x28
 8005460:	9a08      	ldr	r2, [sp, #32]
 8005462:	18e3      	adds	r3, r4, r3
 8005464:	18a5      	adds	r5, r4, r2
 8005466:	aa22      	add	r2, sp, #136	; 0x88
 8005468:	f104 0801 	add.w	r8, r4, #1
 800546c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	4543      	cmp	r3, r8
 8005476:	da04      	bge.n	8005482 <__kernel_rem_pio2+0x3aa>
 8005478:	461c      	mov	r4, r3
 800547a:	e6a3      	b.n	80051c4 <__kernel_rem_pio2+0xec>
 800547c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800547e:	2301      	movs	r3, #1
 8005480:	e7e4      	b.n	800544c <__kernel_rem_pio2+0x374>
 8005482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005484:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005488:	f7fa fff0 	bl	800046c <__aeabi_i2d>
 800548c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005492:	46ab      	mov	fp, r5
 8005494:	461c      	mov	r4, r3
 8005496:	f04f 0900 	mov.w	r9, #0
 800549a:	2600      	movs	r6, #0
 800549c:	2700      	movs	r7, #0
 800549e:	9b06      	ldr	r3, [sp, #24]
 80054a0:	4599      	cmp	r9, r3
 80054a2:	dd06      	ble.n	80054b2 <__kernel_rem_pio2+0x3da>
 80054a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80054aa:	f108 0801 	add.w	r8, r8, #1
 80054ae:	930a      	str	r3, [sp, #40]	; 0x28
 80054b0:	e7df      	b.n	8005472 <__kernel_rem_pio2+0x39a>
 80054b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80054b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80054ba:	f7fb f841 	bl	8000540 <__aeabi_dmul>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fa fe85 	bl	80001d4 <__adddf3>
 80054ca:	f109 0901 	add.w	r9, r9, #1
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	e7e4      	b.n	800549e <__kernel_rem_pio2+0x3c6>
 80054d4:	3d01      	subs	r5, #1
 80054d6:	e748      	b.n	800536a <__kernel_rem_pio2+0x292>
 80054d8:	ec47 6b10 	vmov	d0, r6, r7
 80054dc:	f1ca 0000 	rsb	r0, sl, #0
 80054e0:	f000 fa92 	bl	8005a08 <scalbn>
 80054e4:	ec57 6b10 	vmov	r6, r7, d0
 80054e8:	4ba0      	ldr	r3, [pc, #640]	; (800576c <__kernel_rem_pio2+0x694>)
 80054ea:	ee10 0a10 	vmov	r0, s0
 80054ee:	2200      	movs	r2, #0
 80054f0:	4639      	mov	r1, r7
 80054f2:	f7fb faab 	bl	8000a4c <__aeabi_dcmpge>
 80054f6:	b1f8      	cbz	r0, 8005538 <__kernel_rem_pio2+0x460>
 80054f8:	4b9d      	ldr	r3, [pc, #628]	; (8005770 <__kernel_rem_pio2+0x698>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	f7fb f81e 	bl	8000540 <__aeabi_dmul>
 8005504:	f7fb fab6 	bl	8000a74 <__aeabi_d2iz>
 8005508:	4680      	mov	r8, r0
 800550a:	f7fa ffaf 	bl	800046c <__aeabi_i2d>
 800550e:	4b97      	ldr	r3, [pc, #604]	; (800576c <__kernel_rem_pio2+0x694>)
 8005510:	2200      	movs	r2, #0
 8005512:	f7fb f815 	bl	8000540 <__aeabi_dmul>
 8005516:	460b      	mov	r3, r1
 8005518:	4602      	mov	r2, r0
 800551a:	4639      	mov	r1, r7
 800551c:	4630      	mov	r0, r6
 800551e:	f7fa fe57 	bl	80001d0 <__aeabi_dsub>
 8005522:	f7fb faa7 	bl	8000a74 <__aeabi_d2iz>
 8005526:	1c65      	adds	r5, r4, #1
 8005528:	ab0e      	add	r3, sp, #56	; 0x38
 800552a:	f10a 0a18 	add.w	sl, sl, #24
 800552e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005532:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005536:	e720      	b.n	800537a <__kernel_rem_pio2+0x2a2>
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb fa9a 	bl	8000a74 <__aeabi_d2iz>
 8005540:	ab0e      	add	r3, sp, #56	; 0x38
 8005542:	4625      	mov	r5, r4
 8005544:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005548:	e717      	b.n	800537a <__kernel_rem_pio2+0x2a2>
 800554a:	ab0e      	add	r3, sp, #56	; 0x38
 800554c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005550:	f7fa ff8c 	bl	800046c <__aeabi_i2d>
 8005554:	4632      	mov	r2, r6
 8005556:	463b      	mov	r3, r7
 8005558:	f7fa fff2 	bl	8000540 <__aeabi_dmul>
 800555c:	4b84      	ldr	r3, [pc, #528]	; (8005770 <__kernel_rem_pio2+0x698>)
 800555e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005562:	2200      	movs	r2, #0
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fa ffea 	bl	8000540 <__aeabi_dmul>
 800556c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005570:	4606      	mov	r6, r0
 8005572:	460f      	mov	r7, r1
 8005574:	e70f      	b.n	8005396 <__kernel_rem_pio2+0x2be>
 8005576:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800557a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800557e:	f7fa ffdf 	bl	8000540 <__aeabi_dmul>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800558a:	f7fa fe23 	bl	80001d4 <__adddf3>
 800558e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005592:	f108 0801 	add.w	r8, r8, #1
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	4598      	cmp	r8, r3
 800559a:	dc01      	bgt.n	80055a0 <__kernel_rem_pio2+0x4c8>
 800559c:	45b8      	cmp	r8, r7
 800559e:	ddea      	ble.n	8005576 <__kernel_rem_pio2+0x49e>
 80055a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80055a4:	ab4a      	add	r3, sp, #296	; 0x128
 80055a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80055aa:	ed87 7b00 	vstr	d7, [r7]
 80055ae:	3e01      	subs	r6, #1
 80055b0:	e6f8      	b.n	80053a4 <__kernel_rem_pio2+0x2cc>
 80055b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	dc0b      	bgt.n	80055d0 <__kernel_rem_pio2+0x4f8>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	dc35      	bgt.n	8005628 <__kernel_rem_pio2+0x550>
 80055bc:	d059      	beq.n	8005672 <__kernel_rem_pio2+0x59a>
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	f003 0007 	and.w	r0, r3, #7
 80055c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80055c8:	ecbd 8b02 	vpop	{d8}
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d1f3      	bne.n	80055be <__kernel_rem_pio2+0x4e6>
 80055d6:	ab4a      	add	r3, sp, #296	; 0x128
 80055d8:	4423      	add	r3, r4
 80055da:	9306      	str	r3, [sp, #24]
 80055dc:	461c      	mov	r4, r3
 80055de:	469a      	mov	sl, r3
 80055e0:	9502      	str	r5, [sp, #8]
 80055e2:	9b02      	ldr	r3, [sp, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f1aa 0a08 	sub.w	sl, sl, #8
 80055ea:	dc6b      	bgt.n	80056c4 <__kernel_rem_pio2+0x5ec>
 80055ec:	46aa      	mov	sl, r5
 80055ee:	f1ba 0f01 	cmp.w	sl, #1
 80055f2:	f1a4 0408 	sub.w	r4, r4, #8
 80055f6:	f300 8085 	bgt.w	8005704 <__kernel_rem_pio2+0x62c>
 80055fa:	9c06      	ldr	r4, [sp, #24]
 80055fc:	2000      	movs	r0, #0
 80055fe:	3408      	adds	r4, #8
 8005600:	2100      	movs	r1, #0
 8005602:	2d01      	cmp	r5, #1
 8005604:	f300 809d 	bgt.w	8005742 <__kernel_rem_pio2+0x66a>
 8005608:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800560c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005610:	f1bb 0f00 	cmp.w	fp, #0
 8005614:	f040 809b 	bne.w	800574e <__kernel_rem_pio2+0x676>
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	e9c3 5600 	strd	r5, r6, [r3]
 800561e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005622:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005626:	e7ca      	b.n	80055be <__kernel_rem_pio2+0x4e6>
 8005628:	3408      	adds	r4, #8
 800562a:	ab4a      	add	r3, sp, #296	; 0x128
 800562c:	441c      	add	r4, r3
 800562e:	462e      	mov	r6, r5
 8005630:	2000      	movs	r0, #0
 8005632:	2100      	movs	r1, #0
 8005634:	2e00      	cmp	r6, #0
 8005636:	da36      	bge.n	80056a6 <__kernel_rem_pio2+0x5ce>
 8005638:	f1bb 0f00 	cmp.w	fp, #0
 800563c:	d039      	beq.n	80056b2 <__kernel_rem_pio2+0x5da>
 800563e:	4602      	mov	r2, r0
 8005640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005644:	9c01      	ldr	r4, [sp, #4]
 8005646:	e9c4 2300 	strd	r2, r3, [r4]
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005652:	f7fa fdbd 	bl	80001d0 <__aeabi_dsub>
 8005656:	ae4c      	add	r6, sp, #304	; 0x130
 8005658:	2401      	movs	r4, #1
 800565a:	42a5      	cmp	r5, r4
 800565c:	da2c      	bge.n	80056b8 <__kernel_rem_pio2+0x5e0>
 800565e:	f1bb 0f00 	cmp.w	fp, #0
 8005662:	d002      	beq.n	800566a <__kernel_rem_pio2+0x592>
 8005664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005668:	4619      	mov	r1, r3
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005670:	e7a5      	b.n	80055be <__kernel_rem_pio2+0x4e6>
 8005672:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005676:	eb0d 0403 	add.w	r4, sp, r3
 800567a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800567e:	2000      	movs	r0, #0
 8005680:	2100      	movs	r1, #0
 8005682:	2d00      	cmp	r5, #0
 8005684:	da09      	bge.n	800569a <__kernel_rem_pio2+0x5c2>
 8005686:	f1bb 0f00 	cmp.w	fp, #0
 800568a:	d002      	beq.n	8005692 <__kernel_rem_pio2+0x5ba>
 800568c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005690:	4619      	mov	r1, r3
 8005692:	9b01      	ldr	r3, [sp, #4]
 8005694:	e9c3 0100 	strd	r0, r1, [r3]
 8005698:	e791      	b.n	80055be <__kernel_rem_pio2+0x4e6>
 800569a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800569e:	f7fa fd99 	bl	80001d4 <__adddf3>
 80056a2:	3d01      	subs	r5, #1
 80056a4:	e7ed      	b.n	8005682 <__kernel_rem_pio2+0x5aa>
 80056a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80056aa:	f7fa fd93 	bl	80001d4 <__adddf3>
 80056ae:	3e01      	subs	r6, #1
 80056b0:	e7c0      	b.n	8005634 <__kernel_rem_pio2+0x55c>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	e7c5      	b.n	8005644 <__kernel_rem_pio2+0x56c>
 80056b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80056bc:	f7fa fd8a 	bl	80001d4 <__adddf3>
 80056c0:	3401      	adds	r4, #1
 80056c2:	e7ca      	b.n	800565a <__kernel_rem_pio2+0x582>
 80056c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80056c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80056cc:	9b02      	ldr	r3, [sp, #8]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	4632      	mov	r2, r6
 80056d4:	463b      	mov	r3, r7
 80056d6:	4640      	mov	r0, r8
 80056d8:	4649      	mov	r1, r9
 80056da:	f7fa fd7b 	bl	80001d4 <__adddf3>
 80056de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa fd71 	bl	80001d0 <__aeabi_dsub>
 80056ee:	4632      	mov	r2, r6
 80056f0:	463b      	mov	r3, r7
 80056f2:	f7fa fd6f 	bl	80001d4 <__adddf3>
 80056f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80056fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80056fe:	ed8a 7b00 	vstr	d7, [sl]
 8005702:	e76e      	b.n	80055e2 <__kernel_rem_pio2+0x50a>
 8005704:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005708:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800570c:	4640      	mov	r0, r8
 800570e:	4632      	mov	r2, r6
 8005710:	463b      	mov	r3, r7
 8005712:	4649      	mov	r1, r9
 8005714:	f7fa fd5e 	bl	80001d4 <__adddf3>
 8005718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	f7fa fd54 	bl	80001d0 <__aeabi_dsub>
 8005728:	4632      	mov	r2, r6
 800572a:	463b      	mov	r3, r7
 800572c:	f7fa fd52 	bl	80001d4 <__adddf3>
 8005730:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005734:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005738:	ed84 7b00 	vstr	d7, [r4]
 800573c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005740:	e755      	b.n	80055ee <__kernel_rem_pio2+0x516>
 8005742:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005746:	f7fa fd45 	bl	80001d4 <__adddf3>
 800574a:	3d01      	subs	r5, #1
 800574c:	e759      	b.n	8005602 <__kernel_rem_pio2+0x52a>
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	9a01      	ldr	r2, [sp, #4]
 8005752:	601d      	str	r5, [r3, #0]
 8005754:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005758:	605c      	str	r4, [r3, #4]
 800575a:	609f      	str	r7, [r3, #8]
 800575c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005760:	60d3      	str	r3, [r2, #12]
 8005762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005766:	6110      	str	r0, [r2, #16]
 8005768:	6153      	str	r3, [r2, #20]
 800576a:	e728      	b.n	80055be <__kernel_rem_pio2+0x4e6>
 800576c:	41700000 	.word	0x41700000
 8005770:	3e700000 	.word	0x3e700000
 8005774:	00000000 	.word	0x00000000

08005778 <__kernel_sin>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	ed2d 8b04 	vpush	{d8-d9}
 8005780:	eeb0 8a41 	vmov.f32	s16, s2
 8005784:	eef0 8a61 	vmov.f32	s17, s3
 8005788:	ec55 4b10 	vmov	r4, r5, d0
 800578c:	b083      	sub	sp, #12
 800578e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005792:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005796:	9001      	str	r0, [sp, #4]
 8005798:	da06      	bge.n	80057a8 <__kernel_sin+0x30>
 800579a:	ee10 0a10 	vmov	r0, s0
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fb f968 	bl	8000a74 <__aeabi_d2iz>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d051      	beq.n	800584c <__kernel_sin+0xd4>
 80057a8:	4622      	mov	r2, r4
 80057aa:	462b      	mov	r3, r5
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fa fec6 	bl	8000540 <__aeabi_dmul>
 80057b4:	4682      	mov	sl, r0
 80057b6:	468b      	mov	fp, r1
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa febe 	bl	8000540 <__aeabi_dmul>
 80057c4:	a341      	add	r3, pc, #260	; (adr r3, 80058cc <__kernel_sin+0x154>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4680      	mov	r8, r0
 80057cc:	4689      	mov	r9, r1
 80057ce:	4650      	mov	r0, sl
 80057d0:	4659      	mov	r1, fp
 80057d2:	f7fa feb5 	bl	8000540 <__aeabi_dmul>
 80057d6:	a33f      	add	r3, pc, #252	; (adr r3, 80058d4 <__kernel_sin+0x15c>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa fcf8 	bl	80001d0 <__aeabi_dsub>
 80057e0:	4652      	mov	r2, sl
 80057e2:	465b      	mov	r3, fp
 80057e4:	f7fa feac 	bl	8000540 <__aeabi_dmul>
 80057e8:	a33c      	add	r3, pc, #240	; (adr r3, 80058dc <__kernel_sin+0x164>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa fcf1 	bl	80001d4 <__adddf3>
 80057f2:	4652      	mov	r2, sl
 80057f4:	465b      	mov	r3, fp
 80057f6:	f7fa fea3 	bl	8000540 <__aeabi_dmul>
 80057fa:	a33a      	add	r3, pc, #232	; (adr r3, 80058e4 <__kernel_sin+0x16c>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f7fa fce6 	bl	80001d0 <__aeabi_dsub>
 8005804:	4652      	mov	r2, sl
 8005806:	465b      	mov	r3, fp
 8005808:	f7fa fe9a 	bl	8000540 <__aeabi_dmul>
 800580c:	a337      	add	r3, pc, #220	; (adr r3, 80058ec <__kernel_sin+0x174>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fcdf 	bl	80001d4 <__adddf3>
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	b9eb      	cbnz	r3, 800585a <__kernel_sin+0xe2>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4650      	mov	r0, sl
 8005824:	4659      	mov	r1, fp
 8005826:	f7fa fe8b 	bl	8000540 <__aeabi_dmul>
 800582a:	a325      	add	r3, pc, #148	; (adr r3, 80058c0 <__kernel_sin+0x148>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fcce 	bl	80001d0 <__aeabi_dsub>
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	f7fa fe82 	bl	8000540 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	f7fa fcc6 	bl	80001d4 <__adddf3>
 8005848:	4604      	mov	r4, r0
 800584a:	460d      	mov	r5, r1
 800584c:	ec45 4b10 	vmov	d0, r4, r5
 8005850:	b003      	add	sp, #12
 8005852:	ecbd 8b04 	vpop	{d8-d9}
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <__kernel_sin+0x150>)
 800585c:	ec51 0b18 	vmov	r0, r1, d8
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fe6d 	bl	8000540 <__aeabi_dmul>
 8005866:	4632      	mov	r2, r6
 8005868:	ec41 0b19 	vmov	d9, r0, r1
 800586c:	463b      	mov	r3, r7
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fa fe65 	bl	8000540 <__aeabi_dmul>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	ec51 0b19 	vmov	r0, r1, d9
 800587e:	f7fa fca7 	bl	80001d0 <__aeabi_dsub>
 8005882:	4652      	mov	r2, sl
 8005884:	465b      	mov	r3, fp
 8005886:	f7fa fe5b 	bl	8000540 <__aeabi_dmul>
 800588a:	ec53 2b18 	vmov	r2, r3, d8
 800588e:	f7fa fc9f 	bl	80001d0 <__aeabi_dsub>
 8005892:	a30b      	add	r3, pc, #44	; (adr r3, 80058c0 <__kernel_sin+0x148>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	4606      	mov	r6, r0
 800589a:	460f      	mov	r7, r1
 800589c:	4640      	mov	r0, r8
 800589e:	4649      	mov	r1, r9
 80058a0:	f7fa fe4e 	bl	8000540 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4630      	mov	r0, r6
 80058aa:	4639      	mov	r1, r7
 80058ac:	f7fa fc92 	bl	80001d4 <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fc8a 	bl	80001d0 <__aeabi_dsub>
 80058bc:	e7c4      	b.n	8005848 <__kernel_sin+0xd0>
 80058be:	bf00      	nop
 80058c0:	55555549 	.word	0x55555549
 80058c4:	3fc55555 	.word	0x3fc55555
 80058c8:	3fe00000 	.word	0x3fe00000
 80058cc:	5acfd57c 	.word	0x5acfd57c
 80058d0:	3de5d93a 	.word	0x3de5d93a
 80058d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80058d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80058dc:	57b1fe7d 	.word	0x57b1fe7d
 80058e0:	3ec71de3 	.word	0x3ec71de3
 80058e4:	19c161d5 	.word	0x19c161d5
 80058e8:	3f2a01a0 	.word	0x3f2a01a0
 80058ec:	1110f8a6 	.word	0x1110f8a6
 80058f0:	3f811111 	.word	0x3f811111

080058f4 <fabs>:
 80058f4:	ec51 0b10 	vmov	r0, r1, d0
 80058f8:	ee10 2a10 	vmov	r2, s0
 80058fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005900:	ec43 2b10 	vmov	d0, r2, r3
 8005904:	4770      	bx	lr
	...

08005908 <floor>:
 8005908:	ec51 0b10 	vmov	r0, r1, d0
 800590c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005910:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005914:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005918:	2e13      	cmp	r6, #19
 800591a:	ee10 5a10 	vmov	r5, s0
 800591e:	ee10 8a10 	vmov	r8, s0
 8005922:	460c      	mov	r4, r1
 8005924:	dc32      	bgt.n	800598c <floor+0x84>
 8005926:	2e00      	cmp	r6, #0
 8005928:	da14      	bge.n	8005954 <floor+0x4c>
 800592a:	a333      	add	r3, pc, #204	; (adr r3, 80059f8 <floor+0xf0>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f7fa fc50 	bl	80001d4 <__adddf3>
 8005934:	2200      	movs	r2, #0
 8005936:	2300      	movs	r3, #0
 8005938:	f7fb f892 	bl	8000a60 <__aeabi_dcmpgt>
 800593c:	b138      	cbz	r0, 800594e <floor+0x46>
 800593e:	2c00      	cmp	r4, #0
 8005940:	da57      	bge.n	80059f2 <floor+0xea>
 8005942:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005946:	431d      	orrs	r5, r3
 8005948:	d001      	beq.n	800594e <floor+0x46>
 800594a:	4c2d      	ldr	r4, [pc, #180]	; (8005a00 <floor+0xf8>)
 800594c:	2500      	movs	r5, #0
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	e025      	b.n	80059a0 <floor+0x98>
 8005954:	4f2b      	ldr	r7, [pc, #172]	; (8005a04 <floor+0xfc>)
 8005956:	4137      	asrs	r7, r6
 8005958:	ea01 0307 	and.w	r3, r1, r7
 800595c:	4303      	orrs	r3, r0
 800595e:	d01f      	beq.n	80059a0 <floor+0x98>
 8005960:	a325      	add	r3, pc, #148	; (adr r3, 80059f8 <floor+0xf0>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fc35 	bl	80001d4 <__adddf3>
 800596a:	2200      	movs	r2, #0
 800596c:	2300      	movs	r3, #0
 800596e:	f7fb f877 	bl	8000a60 <__aeabi_dcmpgt>
 8005972:	2800      	cmp	r0, #0
 8005974:	d0eb      	beq.n	800594e <floor+0x46>
 8005976:	2c00      	cmp	r4, #0
 8005978:	bfbe      	ittt	lt
 800597a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800597e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005982:	19a4      	addlt	r4, r4, r6
 8005984:	ea24 0407 	bic.w	r4, r4, r7
 8005988:	2500      	movs	r5, #0
 800598a:	e7e0      	b.n	800594e <floor+0x46>
 800598c:	2e33      	cmp	r6, #51	; 0x33
 800598e:	dd0b      	ble.n	80059a8 <floor+0xa0>
 8005990:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005994:	d104      	bne.n	80059a0 <floor+0x98>
 8005996:	ee10 2a10 	vmov	r2, s0
 800599a:	460b      	mov	r3, r1
 800599c:	f7fa fc1a 	bl	80001d4 <__adddf3>
 80059a0:	ec41 0b10 	vmov	d0, r0, r1
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	fa23 f707 	lsr.w	r7, r3, r7
 80059b4:	4207      	tst	r7, r0
 80059b6:	d0f3      	beq.n	80059a0 <floor+0x98>
 80059b8:	a30f      	add	r3, pc, #60	; (adr r3, 80059f8 <floor+0xf0>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fc09 	bl	80001d4 <__adddf3>
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	f7fb f84b 	bl	8000a60 <__aeabi_dcmpgt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d0bf      	beq.n	800594e <floor+0x46>
 80059ce:	2c00      	cmp	r4, #0
 80059d0:	da02      	bge.n	80059d8 <floor+0xd0>
 80059d2:	2e14      	cmp	r6, #20
 80059d4:	d103      	bne.n	80059de <floor+0xd6>
 80059d6:	3401      	adds	r4, #1
 80059d8:	ea25 0507 	bic.w	r5, r5, r7
 80059dc:	e7b7      	b.n	800594e <floor+0x46>
 80059de:	2301      	movs	r3, #1
 80059e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80059e4:	fa03 f606 	lsl.w	r6, r3, r6
 80059e8:	4435      	add	r5, r6
 80059ea:	4545      	cmp	r5, r8
 80059ec:	bf38      	it	cc
 80059ee:	18e4      	addcc	r4, r4, r3
 80059f0:	e7f2      	b.n	80059d8 <floor+0xd0>
 80059f2:	2500      	movs	r5, #0
 80059f4:	462c      	mov	r4, r5
 80059f6:	e7aa      	b.n	800594e <floor+0x46>
 80059f8:	8800759c 	.word	0x8800759c
 80059fc:	7e37e43c 	.word	0x7e37e43c
 8005a00:	bff00000 	.word	0xbff00000
 8005a04:	000fffff 	.word	0x000fffff

08005a08 <scalbn>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	ec55 4b10 	vmov	r4, r5, d0
 8005a0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005a12:	4606      	mov	r6, r0
 8005a14:	462b      	mov	r3, r5
 8005a16:	b99a      	cbnz	r2, 8005a40 <scalbn+0x38>
 8005a18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a1c:	4323      	orrs	r3, r4
 8005a1e:	d036      	beq.n	8005a8e <scalbn+0x86>
 8005a20:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <scalbn+0x100>)
 8005a22:	4629      	mov	r1, r5
 8005a24:	ee10 0a10 	vmov	r0, s0
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f7fa fd89 	bl	8000540 <__aeabi_dmul>
 8005a2e:	4b37      	ldr	r3, [pc, #220]	; (8005b0c <scalbn+0x104>)
 8005a30:	429e      	cmp	r6, r3
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
 8005a36:	da10      	bge.n	8005a5a <scalbn+0x52>
 8005a38:	a32b      	add	r3, pc, #172	; (adr r3, 8005ae8 <scalbn+0xe0>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	e03a      	b.n	8005ab6 <scalbn+0xae>
 8005a40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005a44:	428a      	cmp	r2, r1
 8005a46:	d10c      	bne.n	8005a62 <scalbn+0x5a>
 8005a48:	ee10 2a10 	vmov	r2, s0
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fbc0 	bl	80001d4 <__adddf3>
 8005a54:	4604      	mov	r4, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	e019      	b.n	8005a8e <scalbn+0x86>
 8005a5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a5e:	460b      	mov	r3, r1
 8005a60:	3a36      	subs	r2, #54	; 0x36
 8005a62:	4432      	add	r2, r6
 8005a64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a68:	428a      	cmp	r2, r1
 8005a6a:	dd08      	ble.n	8005a7e <scalbn+0x76>
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	a120      	add	r1, pc, #128	; (adr r1, 8005af0 <scalbn+0xe8>)
 8005a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a74:	da1c      	bge.n	8005ab0 <scalbn+0xa8>
 8005a76:	a120      	add	r1, pc, #128	; (adr r1, 8005af8 <scalbn+0xf0>)
 8005a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a7c:	e018      	b.n	8005ab0 <scalbn+0xa8>
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	dd08      	ble.n	8005a94 <scalbn+0x8c>
 8005a82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a8e:	ec45 4b10 	vmov	d0, r4, r5
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005a98:	da19      	bge.n	8005ace <scalbn+0xc6>
 8005a9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a9e:	429e      	cmp	r6, r3
 8005aa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005aa4:	dd0a      	ble.n	8005abc <scalbn+0xb4>
 8005aa6:	a112      	add	r1, pc, #72	; (adr r1, 8005af0 <scalbn+0xe8>)
 8005aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e2      	bne.n	8005a76 <scalbn+0x6e>
 8005ab0:	a30f      	add	r3, pc, #60	; (adr r3, 8005af0 <scalbn+0xe8>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fd43 	bl	8000540 <__aeabi_dmul>
 8005aba:	e7cb      	b.n	8005a54 <scalbn+0x4c>
 8005abc:	a10a      	add	r1, pc, #40	; (adr r1, 8005ae8 <scalbn+0xe0>)
 8005abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0b8      	beq.n	8005a38 <scalbn+0x30>
 8005ac6:	a10e      	add	r1, pc, #56	; (adr r1, 8005b00 <scalbn+0xf8>)
 8005ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005acc:	e7b4      	b.n	8005a38 <scalbn+0x30>
 8005ace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ad2:	3236      	adds	r2, #54	; 0x36
 8005ad4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ad8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005adc:	4620      	mov	r0, r4
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <scalbn+0x108>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	e7e8      	b.n	8005ab6 <scalbn+0xae>
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	c2f8f359 	.word	0xc2f8f359
 8005aec:	01a56e1f 	.word	0x01a56e1f
 8005af0:	8800759c 	.word	0x8800759c
 8005af4:	7e37e43c 	.word	0x7e37e43c
 8005af8:	8800759c 	.word	0x8800759c
 8005afc:	fe37e43c 	.word	0xfe37e43c
 8005b00:	c2f8f359 	.word	0xc2f8f359
 8005b04:	81a56e1f 	.word	0x81a56e1f
 8005b08:	43500000 	.word	0x43500000
 8005b0c:	ffff3cb0 	.word	0xffff3cb0
 8005b10:	3c900000 	.word	0x3c900000

08005b14 <_init>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr

08005b20 <_fini>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr
